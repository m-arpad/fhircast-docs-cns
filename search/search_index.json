{
    "docs": [
        {
            "location": "/", 
            "text": "FHIRcast \n- \nmodern, simple application context synchronization\n\n\nOverview\n\n\nFHIRcast synchronizes healthcare applications in real time to show the same clinical content to a common user. For example, a radiologist often works in three disparate applications at the same time (a radiology information system, a PACS and a dictation system), she wants each of these three systems to display the same study or patient at the same time. \n\n\nFHIRcast isn't limited to radiology use-cases. Modeled after the common webhook design pattern and specifically \nWebSub\n, FHIRcast naturally extends the SMART on FHIR launch protocol to achieve tight integration between disparate, full-featured applications. FHIRcast builds on the \nCCOW\n abstract model to specify an http-based and simple context synchronization specification that doesn't require a separate context manager. \n\n\nAdopting the WebSub terminology, FHIRcast describes an app as a subscriber synchronizing with an EHR in the role of a hub, but any user-facing application can synchronize with FHIRcast. While less common,  bidirectional communication between multiple applications is also possible.\n\n\nWhy?\n\n\nThe large number of vendor-specific or proprietary context synchronization methods in production limit the industry's ability to enhance the very large number of integrations currently in production. In practice, these integrations are decentralized and simple. \n\n\nHow it works\n\n\nThe \ndriving application\n could be an EHR, a PACS, a worklist or any other clinical workflow system (we use the term EHR as shorthand). The driving application integrates the Hub, the SMART authorization server and a FHIR server. As part of a SMART launch, the app requests the \nfhircast\n OAuth 2.0 scope and receives the location of the Hub and a unique \nhub.topic\n url, which serves as the identifier of the user's session.\n\n\nThe app subscribes to specific workflow events for the given user's session by contacting the Hub. The Hub verifies the subscription notifies the app when those workflow events occur; for example, by the clinician opening a patient's chart. The app deletes its subscription when it no longer wants to receive notifications.\n\n\n\n\n\nEvent notifications are thin json wrappers around FHIR resources. \n\n\nThe app can request context changes by sending an event notification to the Hub's \nhub.topic\n url. The HTTP response status indicates success or failure.     \n\n\nThe \nEvent Catalog\n documents the workflow events that can be communicated in FHIRcast. Each event will always carry the same type of FHIR resources.\n\n\n\n\nGet involved\n\n\n\n\nCheck out our \nawesome community contributions on github\n\n\nLog issues, submit a PR!\n\n\nConverse at chat.fhir.org", 
            "title": "Home"
        }, 
        {
            "location": "/#fhircast-modern-simple-application-context-synchronization", 
            "text": "", 
            "title": "FHIRcast - modern, simple application context synchronization"
        }, 
        {
            "location": "/#overview", 
            "text": "FHIRcast synchronizes healthcare applications in real time to show the same clinical content to a common user. For example, a radiologist often works in three disparate applications at the same time (a radiology information system, a PACS and a dictation system), she wants each of these three systems to display the same study or patient at the same time.   FHIRcast isn't limited to radiology use-cases. Modeled after the common webhook design pattern and specifically  WebSub , FHIRcast naturally extends the SMART on FHIR launch protocol to achieve tight integration between disparate, full-featured applications. FHIRcast builds on the  CCOW  abstract model to specify an http-based and simple context synchronization specification that doesn't require a separate context manager.   Adopting the WebSub terminology, FHIRcast describes an app as a subscriber synchronizing with an EHR in the role of a hub, but any user-facing application can synchronize with FHIRcast. While less common,  bidirectional communication between multiple applications is also possible.", 
            "title": "Overview"
        }, 
        {
            "location": "/#why", 
            "text": "The large number of vendor-specific or proprietary context synchronization methods in production limit the industry's ability to enhance the very large number of integrations currently in production. In practice, these integrations are decentralized and simple.", 
            "title": "Why?"
        }, 
        {
            "location": "/#how-it-works", 
            "text": "The  driving application  could be an EHR, a PACS, a worklist or any other clinical workflow system (we use the term EHR as shorthand). The driving application integrates the Hub, the SMART authorization server and a FHIR server. As part of a SMART launch, the app requests the  fhircast  OAuth 2.0 scope and receives the location of the Hub and a unique  hub.topic  url, which serves as the identifier of the user's session.  The app subscribes to specific workflow events for the given user's session by contacting the Hub. The Hub verifies the subscription notifies the app when those workflow events occur; for example, by the clinician opening a patient's chart. The app deletes its subscription when it no longer wants to receive notifications.   Event notifications are thin json wrappers around FHIR resources.   The app can request context changes by sending an event notification to the Hub's  hub.topic  url. The HTTP response status indicates success or failure.       The  Event Catalog  documents the workflow events that can be communicated in FHIRcast. Each event will always carry the same type of FHIR resources.", 
            "title": "How it works"
        }, 
        {
            "location": "/#get-involved", 
            "text": "Check out our  awesome community contributions on github  Log issues, submit a PR!  Converse at chat.fhir.org", 
            "title": "Get involved"
        }, 
        {
            "location": "/specification/STU1/", 
            "text": "FHIRcast\n\n\n\n\n\"1.0 Draft\" This is the draft of the 1.0 release of the FHIRcast specification. We are currently working towards a 1.0 release and would love your feedback and proposed changes. Look at our \ncurrent issue list\n and get involved!\n\n\n\n\nOverview\n\n\nThe FHIRcast specification describes the APIs and interactions to synchronize healthcare applications in real time to show the same clinical content to a user. All data exchanged through the HTTP APIs MUST be sent and received as \nJSON\n structures, and MUST be transmitted over channels secured using the Hypertext Transfer Protocol (HTTP) over Transport Layer Security (TLS), also known as HTTPS and defined in \nRFC2818\n. FHIRcast is modeled on the webhook design pattern and specifically the \nW3C WebSub RFC\n, such as its uses of GET vs POST interactions. FHIRcast also builds on the \nHL7 SMART on FHIR launch protocol\n. \n\n\nAn app subscribes to specific workflow events for a given session, the subscription is verified and the app is notified when those workflow events occur; for example, by the clinician opening a patient's chart. The subscring app may initiate context changes by accessing APIs exposed by the Hub. The app deletes its subscription when it no longer wants to receive notifications. In all cases the app authenticates to the Hub with an OAuth 2.0 bearer token. \n\n\nSession Discovery\n\n\nA session is an abstract concept representing a shared workspace, such as user's login session over multiple applications or a shared view of one application distributed to multiple users. FHIRcast requires a session to have a unique url as an identifier. This url is exchanged as the value of the \nhub.topic\n parameter. Before establishing a subscription, an app must not only know the \nhub.topic\n, but also the the \nhub.url\n which contains the base url of the hub. \n\n\nSystems SHOULD use SMART on FHIR to authorize, authenticate and exchange the \nhub.url\n and \nhub.topic\n urls as SMART on FHIR launch context parameters. If using SMART, the app SHALL either be launched from the driving application following the \nSMART on FHIR EHR launch\n flow or the app may initiate the launch following the \nSMART on FHIR standalone launch\n. In either case, the app SHALL request and, if authorized, SHALL be granted the \nfhircast\n OAuth2.0 scope. Accompanying this scope grant, the authorization server SHALL supply the \nhub.url\n and \nhub.topic\n SMART launch parameters alongside the access token. Per SMART, when scopes of \nopenid\n and \nfhirUser\n are granted, the authorization server SHALL additionally send the current user's identity in an \nid_token\n.\n\n\nIf not using SMART on FHIR, the mechanism enabling the app to discover the \nhub.url\n and \nhub.topic\n is not defined in FHIRcast.\n\n\nSMART Launch Example\n\n\nNote that the SMART launch parameters include the Hub's base url and and the session identifier in the \nhub.url\n and \nhub.topic\n fields.\n\n\n{\n  \naccess_token\n: \ni8hweunweunweofiwweoijewiwe\n,\n  \ntoken_type\n: \nbearer\n,\n  \nexpires_in\n: 3600,\n  \npatient\n:  \n123\n,\n  \nencounter\n: \n456\n,\n  \nimagingstudy\n: \n789\n,\n  \nhub.url\n : \nhttps://hub.example.com\n,\n  \nhub.topic\n: \nhttps://hub.example.com/7jaa86kgdudewiaq0wtu\n,\n}\n\n\n\n\nAlthough FHIRcast works best with the SMART on FHIR launch and authorization process, implementation-specific launch, authentication, and authorization protocols may be possible. See \nother launch scenarios\n for guidance.\n\n\nSubscribing and Unsubscribing\n\n\nSubscribing consists of two exchanges:\n\n\n\n\nSubscriber requests a subscription at the \nhub.url\n url.\n\n\nHub confirms the subscription was actually requested by the subscriber by contacting the \nhub.callback\n url. \n\n\n\n\nUnsubscribing works in the same way, except with a single parameter changed to indicate the desire to unsubscribe.\n\n\nSubscription Request\n\n\nTo create a subscription, the subscribing app SHALL perform an HTTP POST (\nRFC7231\n) to the Hub's base url (as specified in \nhub.url\n) with the parameters in the table below.\n\n\nThis request SHALL have a \nContent-Type\n header of \napplication/x-www-form-urlencoded\n and SHALL use the following parameters in its body, formatted accordingly:\n\n\n\n\n\n\n\n\nField\n\n\nOptionality\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhub.callback\n\n\nRequired\n\n\nstring\n\n\nThe Subscriber's callback URL where notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription.\n\n\n\n\n\n\nhub.mode\n\n\nRequired\n\n\nstring\n\n\nThe literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request.\n\n\n\n\n\n\nhub.topic\n\n\nRequired\n\n\nstring\n\n\nThe uri of the user's session that the subscriber wishes to subscribe to or unsubscribe from.\n\n\n\n\n\n\nhub.secret\n\n\nRequired\n\n\nstring\n\n\nA subscriber-provided cryptographically random unique secret string that SHALL be used to compute an \nHMAC digest\n delivered in each notification. This parameter SHALL be less than 200 bytes in length.\n\n\n\n\n\n\nhub.events\n\n\nRequired\n\n\nstring\n\n\nComma-separated list of event types from the Event Catalog for which the Subscriber wants notifications.\n\n\n\n\n\n\nhub.lease_seconds\n\n\nOptional\n\n\nnumber\n\n\nNumber of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. Hubs MAY choose to respect this value or not, depending on their own policies, and MAY set a default value if the subscriber omits the parameter.\n\n\n\n\n\n\n\n\nIf OAuth2 authentication is used, this POST request SHALL contain the Bearer access token in the HTTP Authorization header.\n\n\nHubs SHALL allow subscribers to re-request subscriptions that are already activated. Each subsequent and verified request to a Hub to subscribe or unsubscribe SHALL override the previous subscription state for a specific topic / callback URL combination.\n\n\nThe callback URL MAY contain arbitrary query string parameters (e.g., \n?foo=bar\nred=fish\n). Hubs SHALL preserve the query string during subscription verification by appending new, Hub-defined, parameters to the end of the list using the \n (ampersand) character to join. When sending the event notifications, the Hub SHALL make a POST request to the callback URL including any query string parameters in the URL portion of the request, not as POST body parameters.\n\n\nThe client that creates the subscription may not be the same system as the server hosting the callback url. (For example, some type of federated authorization model could possibly exist between these two systems.) However, in FHIRcast, the Hub assumes that the same authorization and access rights apply to both the subscribing client and the callback url.\n\n\nSubscription Request Example\n\n\nIn this example, the app asks to be notified of the \nopen-patient-chart\n and \nclose-patient-chart\n events.\n\n\nPOST https://hub.example.com\nHost: hub.example.com\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe\nContent-Type: application/x-www-form-urlencoded\n\nhub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a\nhub.mode=subscribe\nhub.topic=https%3A%2F%2Fhub.example.com%2F7jaa86kgdudewiaq0wtu\nhub.secret=shhh-this-is-a-secret\nhub.events=patient-open-chart,patient-close-chart\n\n\n\n\nSubscription Response\n\n\nIf the Hub URL supports FHIRcast and is able to handle the subscription or unsubscription request, the Hub MUST respond to a subscription request with an HTTP 202 \"Accepted\" response to indicate that the request was received and will now be verified by the Hub. The Hub SHOULD perform the verification of intent as soon as possible.\n\n\nIf a Hub finds any errors in the subscription request, an appropriate HTTP error response code (4xx or 5xx) MUST be returned. In the event of an error, the Hub SHOULD return a description of the error in the response body as plain text, used to assist the client developer in understanding the error. This is not meant to be shown to the end user. Hubs MAY decide to reject some callback URLs or topic URIs based on their own policies.\n\n\nSubscription Response Example\n\n\nHTTP/1.1 202 Accepted\n\n\n\n\nSubscription Denial\n\n\nIf (and when) the subscription is denied, the Hub SHALL inform the subscriber by sending an HTTP GET request to the subscriber's callback URL as given in the subscription request. This request has the following query string arguments appended, to which the subscriber SHALL respond with an HTTP success (2xx) code.\n\n\n\n\n\n\n\n\nField\n\n\nOptionality\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhub.mode\n\n\nRequired\n\n\nstring\n\n\nThe literal string \"denied\".\n\n\n\n\n\n\nhub.topic\n\n\nRequired\n\n\nstring\n\n\nThe topic uri given in the corresponding subscription request.\n\n\n\n\n\n\nhub.events\n\n\nRequired\n\n\nstring\n\n\nA comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request.\n\n\n\n\n\n\nhub.reason\n\n\nOptional\n\n\nstring\n\n\nThe Hub may include a reason for which the subscription has been denied. The subscription MAY be denied by the Hub at any point (even if it was previously accepted). The Subscriber SHOULD then consider that the subscription is not possible anymore.\n\n\n\n\n\n\n\n\nSubscription Denial Example\n\n\nGET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=denied\nhub.topic=https%3A%2F%2Fhub.example.com%2F7jaa86kgdudewiaq0wtu\nhub.events=open-patient-chart,close-patient-chart\nhub.reason=session+unexpectedly+stopped HTTP 1.1\nHost: subscriber\n\n\n\n\nIntent Verification\n\n\nIf the subscription is not denied, the Hub SHALL perform the verification of intent of the subscriber. The \nhub.callback\n url verification process ensures that the subscriber actually controls the callback url.\n\n\nIntent Verification Request\n\n\nIn order to prevent an attacker from creating unwanted subscriptions on behalf of a subscriber (or unsubscribing desired ones), a hub must ensure that the subscriber did indeed send the subscription request. The hub SHALL verify a subscription request by sending an HTTPS GET request to the subscriber's callback URL as given in the subscription request. This request SHALL have the following query string arguments appended\n\n\n\n\n\n\n\n\nField\n\n\nOptionality\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhub.mode\n\n\nRequired\n\n\nstring\n\n\nThe literal string \"subscribe\" or \"unsubscribe\", which matches the original request to the hub from the subscriber.\n\n\n\n\n\n\nhub.topic\n\n\nRequired\n\n\nstring\n\n\nThe topic session uri given in the corresponding subscription request.\n\n\n\n\n\n\nhub.events\n\n\nRequired\n\n\nstring\n\n\nA comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request.\n\n\n\n\n\n\nhub.challenge\n\n\nRequired\n\n\nstring\n\n\nA Hub-generated, random string that SHALL be echoed by the subscriber to verify the subscription.\n\n\n\n\n\n\nhub.lease_seconds\n\n\nRequired\n\n\nnumber\n\n\nThe Hub-determined number of seconds that the subscription will stay active before expiring, measured from the time the verification request was made from the Hub to the subscriber. If provided to the client, the Hub SHALL unsubscribe the client once lease_seconds has expired. If the subscriber wishes to continue the subscription it MAY resubscribe.\n\n\n\n\n\n\n\n\nIntent Verification Request Example\n\n\nGET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=subscribe\nhub.topic=7jaa86kgdudewiaq0wtu\nhub.events=open-patient-chart,close-patient-chart\nhub.challenge=meu3we944ix80ox\nhub.lease_seconds=7200 HTTP 1.1\nHost: subscriber\n\n\n\n\nIntent Verification Response\n\n\nIf the \nhub.topic\n of the Intent Verification Request corresponds to a pending subscription or unsubscription that the subscriber wishes to carry out it SHALL respond with an HTTP success (2xx) code, a header of \nContent-Type: text/html\n, and a response body equal to the \nhub.challenge\n parameter. If the subscriber does not agree with the action, the subscriber SHALL respond with a 404 \"Not Found\" response.\n\n\nThe Hub SHALL consider other server response codes (3xx, 4xx, 5xx) to mean that the verification request has failed. If the subscriber returns an HTTP success (2xx) but the content body does not match the \nhub.challenge\n parameter, the Hub SHALL also consider verification to have failed.\n\n\nIntent Verification Response Example\n\n\nHTTP/1.1 200 OK\nContent-Type: text/html\n\nmeu3we944ix80ox\n\n\n\n\nUnsubscribe\n\n\nOnce a subscribing app no longer wants to receive event notifications, it MUST unsubscribe from the session. The unsubscribe request message mirrors the subscribe request message with only a single difference: the \nhub.mode\n MUST be equal to the string \nunsubscribe\n.\n\n\nUnsubscribe Request Example\n\n\nPOST https://hub.example.com\nHost: hub\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe\nContent-Type: application/x-www-form-urlencoded\n\nhub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a\nhub.mode=unsubscribe\nhub.topic=https%3A%2F%2Fhub.example.com%2F7jaa86kgdudewiaq0wtu\nhub.secret=shhh-this-is-a-secret\nhub.events=open-patient-chart,close-patient-chart\n\n\n\n\n\nEvent Notification\n\n\nThe Hub SHALL notify subscribed apps of workflow events to which the app is subscribed, as the event occurs. The notification is an HTTPS POST containing a JSON object in the request body.\n\n\nEvent Notification Request\n\n\nUsing the \nhub.secret\n from the subscription request, the hub SHALL generate an HMAC signature of the payload and include that signature in the request headers of the notification. The \nX-Hub-Signature\n header's value SHALL be in the form \nmethod=signature\n where method is one of the recognized algorithm names and signature is the hexadecimal representation of the signature. The signature SHALL be computed using the HMAC algorithm (\nRFC6151\n) with the request body as the data and the \nhub.secret\n as the key.\n\n\nThe notification to the subscriber SHALL include a description of the subscribed event that just occurred, an ISO 8601-2 formatted timestamp in UTC and an event identifier that is universally unique for the Hub. The timestamp MAY be used by subscribers to establish message affinity (message ordering) through the use of a message queue. The event identifier MAY be used to differentiate retried messages from user actions.\n\n\nEvent Notification Request Details\n\n\nThe notification's \nhub.event\n and \ncontext\n fields inform the subscriber of the current state of the user's session. The \nhub.event\n is a user workflow event, from the Event Catalog. The \ncontext\n is an array of named FHIR resources (similar to \nCDS Hooks's context\n field) that describe the current content of the user's session. Each event in the \nEvent Catalog\n defines what context is expected in the notification. Hubs MAY use the \nFHIR _elements parameter\n to limit the size of the data being passed while also including additional, local identifiers that are likely already in use in production implementations. Subscribers SHALL accept a full FHIR resource or the \n_elements\n-limited resource as defined in the Event Catalog.\n\n\n\n\n\n\n\n\nField\n\n\nOptionality\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntimestamp\n\n\nRequired\n\n\nstring\n\n\nISO 8601-2 timestamp in UTC describing the time at which the event occurred with subsecond accuracy.\n\n\n\n\n\n\nid\n\n\nRequired\n\n\nstring\n\n\nEvent identifier used to recognize retried notifications. This id SHALL be unique for the Hub, for example a GUID.\n\n\n\n\n\n\nevent\n\n\nRequired\n\n\nobject\n\n\nA json object describing the event. See below.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nField\n\n\nOptionality\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhub.topic\n\n\nRequired\n\n\nstring\n\n\nThe topic session uri given in the subscription request.\n\n\n\n\n\n\nhub.event\n\n\nRequired\n\n\nstring\n\n\nThe event that triggered this notification, taken from the list of events from the subscription request.\n\n\n\n\n\n\ncontext\n\n\nRequired\n\n\narray\n\n\nAn array of named FHIR objects corresponding to the user's context after the given event has occurred. Common FHIR resources are: Patient, Encounter, ImagingStudy and List. The Hub SHALL only return FHIR resources that are authorized to be accessed with the existing OAuth2 access_token.\n\n\n\n\n\n\n\n\nEvent Notification Request Example\n\n\nPOST https://app.example.com/session/callback/v7tfwuk17a HTTP/1.1\nHost: subscriber\nX-Hub-Signature: sha256=dce85dc8dfde2426079063ad413268ac72dcf845f9f923193285e693be6ff3ae\n\n{\n  \ntimestamp\n: \n2018-01-08T01:37:05.14\n,\n  \nid\n: \nq9v3jubddqt63n1\n,\n  \nevent\n: {\n    \nhub.topic\n: \nhttps://hub.example.com/7jaa86kgdudewiaq0wtu\n,\n    \nhub.event\n: \nopen-patient-chart\n,\n    \ncontext\n: [\n      {\n        \nkey\n: \npatient\n,\n        \nresource\n: {\n          \nresourceType\n: \nPatient\n,\n          \nid\n: \newUbXT9RWEbSj5wPEdgRaBw3\n,\n          \nidentifier\n: [\n             {\n               \ntype\n: {\n                    \ncoding\n: [\n                        {\n                            \nsystem\n: \nhttp://terminology.hl7.org/CodeSystem/v2-0203\n,\n                            \nvalue\n: \nMR\n,\n                            \ndisplay\n: \nMedication Record Number\n\n                         }\n                        \ntext\n: \nMRN\n\n                      ]\n                  }\n              }\n          ]\n        }\n      }\n    ]\n  }\n}\n\n\n\n\nEvent Notification Response\n\n\nThe subscriber MUST respond to the notification with an appropriate HTTP status code. In the case of a successful notification, the subscriber MUST respond with an HTTP [RFC7231] 2xx response code to indicate a success; otherwise, the subscriber MUST respond with an HTTP error status code. The Hub MAY use these statuses to track synchronization state.\n\n\nEvent Notification Response Example\n\n\nHTTP/1.1 200 OK\n\n\n\n\nRequest Context Change\n\n\nSimilar to the Hub's notifications to the subscriber, the subscriber MAY request context changes with an HTTP POST to the \nhub.topic\n url. The Hub SHALL either accept this context change by responding with any successful HTTP status or reject it by responding with any 4xx or 5xx HTTP status. The subscriber SHALL be capable of gracefully handling a rejected context request. \n\n\nOnce a requested context change is accepted, the Hub SHALL broadcast the context notification to all subscribers, including the original requestor. \n\n\nRequest Context Change Request\n\n\nRequest Context Change Parameters\n\n\n\n\n\n\n\n\nField\n\n\nOptionality\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntimestamp\n\n\nRequired\n\n\nstring\n\n\nISO 8601-2 timestamp in UTC describing the time at which the event occurred with subsecond accuracy.\n\n\n\n\n\n\nid\n\n\nRequired\n\n\nstring\n\n\nEvent identifier used to recognize retried notifications. This id SHALL be uniquely generated by the subscriber and could be a GUID. Following an accepted context change request, the hub MAY re-use this value in the broadcasted event notifications.\n\n\n\n\n\n\nevent\n\n\nRequired\n\n\nobject\n\n\nA json object describing the event. See \nbelow\n.\n\n\n\n\n\n\n\n\nRequest Context Change Event Object Parameters\n\n\n\n\n\n\n\n\nField\n\n\nOptionality\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhub.topic\n\n\nRequired\n\n\nstring\n\n\nThe topic session URI given in the subscription request.\n\n\n\n\n\n\nhub.event\n\n\nRequired\n\n\nstring\n\n\nThe event that triggered this request for the subscriber, taken from the list of events from the subscription request.\n\n\n\n\n\n\ncontext\n\n\nRequired\n\n\narray\n\n\nAn array of named FHIR objects corresponding to the user's context after the given event has occurred. Common FHIR resources are: Patient, Encounter, ImagingStudy and List. The subscriber SHALL only include FHIR resources that are authorized to be accessed with the existing OAuth2 \naccess_token\n.\n\n\n\n\n\n\n\n\nPOST https://hub.example.com/7jaa86kgdudewiaq0wtu HTTP/1.1\nHost: hub\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe\nContent-Type: application/json\n\n{\n  \ntimestamp\n: \n2018-01-08T01:40:05.14\n,\n  \nid\n: \nwYXStHqxFQyHFELh\n,\n  \nevent\n: {\n    \nhub.topic\n: \nhttps://hub.example.com/7jaa86kgdudewiaq0wtu\n,\n    \nhub.event\n: \nclose-patient-chart\n,\n    \ncontext\n: [\n      {\n        \nkey\n: \npatient\n,\n        \nresource\n: {\n          \nresourceType\n: \nPatient\n,\n          \nid\n: \n798E4MyMcpCWHab9\n,\n          \nidentifier\n: [\n             {\n               \ntype\n: {\n                    \ncoding\n: [\n                        {\n                            \nsystem\n: \nhttp://terminology.hl7.org/CodeSystem/v2-0203\n,\n                            \nvalue\n: \nMR\n,\n                            \ndisplay\n: \nMedication Record Number\n\n                         }\n                        \ntext\n: \nMRN\n\n                      ]\n                  }\n              }\n          ]\n        }\n      }\n    ]\n  }\n}\n\n\n\n\nEvent Notification Errors\n\n\nIf the subscriber cannot follow the context of the event, for instance due to an error or a deliberate choice to not follow a context, the subscriber MAY respond with a 'sync-error' event. The Hub MAY use these events to track synchronization state and MAY also forward these events to other subscribers of the same topic.\n\n\nEvent Notification Error Example\n\n\nPOST https://hub.example.com/7jaa86kgdudewiaq0wtu HTTP/1.1\nHost: hub\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe\nContent-Type: application/json\n\n{\n  \ntimestamp\n: \n2018-01-08T01:37:05.14\n,\n  \nid\n: \nq9v3jubddqt63n1\n,\n  \nevent\n: {\n    \nhub.topic\n: \nhttps://hub.example.com/7jaa86kgdudewiaq0wtu\n,\n    \nhub.event\n: \nsync-error\n,\n    \ncontext\n: [\n      {\n        \nkey\n: \noperationoutcome\n,\n        \nresource\n: {\n          \nresourceType\n: \nOperationOutcome\n,\n          \nissue\n: [\n            {\n              \nseverity\n: \nwarning\n,\n              \ncode\n: \nprocessing\n,\n              \ndiagnostics\n: \nAppId3456 failed to follow context\n\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\n\n\n\n\nEvent Catalog\n\n\nEach event definition in the catalog, below, specifies a single event name, a description of the event, and the  required or optional contextual information associated with the event. Alongside the event name, the contextual information is used by the subscriber.\n\n\nFHIR is the interoperable data model used by FHIRcast. The fields within \ncontext\n are subsets of FHIR resources. Hubs MUST send the results of FHIR reads in the context, as specified below. For example, when the \nopen-image-study\n event occurs, the notification sent to a subscriber MUST include the ImagingStudy FHIR resource. Hubs SHOULD send the results of an ImagingStudy FHIR read using the \n_elements\n query parameter, like so:  \nImagingStudy/{id}?_elements=identifier,accession\n and in accordance with the \nFHIR specification\n. \n\n\nA FHIR server may not support the \n_elements\n query parameter; a subscriber MUST gracefully handle receiving a full FHIR resource in the context of a notification.\n\n\nThe name of the event SHOULD succinctly and clearly describe the activity or event. Event names are unique so event creators SHOULD take care to ensure newly proposed events do not conflict with an existing event name. Event creators SHALL name their event with reverse domain notation (e.g. \norg.example.patient-transmogrify\n) if the event is specific to an organization. Reverse domain notation SHALL not be used by a standard event catalog.\n\n\nopen-patient-chart\n\n\nDescription:\n\n\nUser opened patient's medical record. \n\n\nExample:\n\n\n{\n  \ncontext\n: [\n    {\n      \nkey\n: \npatient\n,\n      \nresource\n: {\n        \nresourceType\n: \nPatient\n,\n        \nid\n: \newUbXT9RWEbSj5wPEdgRaBw3\n,\n        \nidentifier\n: [\n           {\n             \ntype\n: {\n                  \ncoding\n: [\n                      {\n                          \nsystem\n: \nhttp://terminology.hl7.org/CodeSystem/v2-0203\n,\n                          \nvalue\n: \nMR\n,\n                          \ndisplay\n: \nMedication Record Number\n\n                       }\n                      \ntext\n: \nMRN\n\n                    ]\n                }\n            }\n        ]\n      }\n    }\n  ]\n}\n\n\n\n\n\n\n\n\n\n\nContext\n\n\nOptionality\n\n\nFHIR operation to generate context\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npatient\n\n\nRequired\n\n\nPatient/{id}?_elements=identifier\n\n\nFHIR Patient resource describing the patient whose chart is currently in context.\n\n\n\n\n\n\nencounter\n\n\nOptional\n\n\nEncounter/{id}?_elements=identifier\n\n\nFHIR Encounter resource in context in the newly opened patient's chart.\n\n\n\n\n\n\n\n\nswitch-patient-chart\n\n\nDescription:\n\n\nUser changed from one open patient's medical record to another previously opened patient's medical record. The context documents the patient whose record is currently open.\n\n\nExample:\n\n\n{\n  \ncontext\n: [\n    {\n      \nkey\n: \npatient\n,\n      \nresource\n: {\n        \nresourceType\n: \nPatient\n,\n        \nid\n: \newUbXT9RWEbSj5wPEdgRaBw3\n,\n        \nidentifier\n: [\n           {\n             \ntype\n: {\n                  \ncoding\n: [\n                      {\n                          \nsystem\n: \nhttp://terminology.hl7.org/CodeSystem/v2-0203\n,\n                          \nvalue\n: \nMR\n,\n                          \ndisplay\n: \nMedication Record Number\n\n                       }\n                      \ntext\n: \nMRN\n\n                    ]\n                }\n            }\n        ]\n      }\n    }\n  ]\n}\n\n\n\n\n\n\n\n\n\n\nContext\n\n\nOptionality\n\n\nFHIR operation to generate context\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npatient\n\n\nRequired\n\n\nPatient/{id}?_elements=identifier\n\n\nFHIR Patient resource describing the patient whose chart is currently in context..\n\n\n\n\n\n\nencounter\n\n\nOptional\n\n\nEncounter/{id}?_elements=identifier\n\n\nFHIR Encounter resource in context in the newly opened patient's chart.\n\n\n\n\n\n\n\n\nclose-patient-chart\n\n\nDescription: User closed patient's medical record.\n\n\nExample:\n\n\n{\n  \ncontext\n: [\n    {\n      \nkey\n: \npatient\n,\n      \nresource\n: {\n        \nresourceType\n: \nPatient\n,\n        \nid\n: \newUbXT9RWEbSj5wPEdgRaBw3\n,\n        \nidentifier\n: [\n           {\n             \ntype\n: {\n                  \ncoding\n: [\n                      {\n                          \nsystem\n: \nhttp://terminology.hl7.org/CodeSystem/v2-0203\n,\n                          \nvalue\n: \nMR\n,\n                          \ndisplay\n: \nMedication Record Number\n\n                       }\n                      \ntext\n: \nMRN\n\n                    ]\n                }\n            }\n        ]\n      }\n    }\n  ]\n}\n\n\n\n\n\n\n\n\n\n\nContext\n\n\nOptionality\n\n\nFHIR operation to generate context\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npatient\n\n\nRequired\n\n\nPatient/{id}?_elements=identifier\n\n\nFHIR Patient resource describing the patient whose chart is currently in context..\n\n\n\n\n\n\nencounter\n\n\nOptional\n\n\nEncounter/{id}?_elements=identifier\n\n\nFHIR Encounter resource in context in the newly opened patient's chart.\n\n\n\n\n\n\n\n\nopen-imaging-study\n\n\nDescription: User opened record of imaging study.\n\n\nExample:\n\n\n{\n  \ncontext\n: [\n    {\n      \nkey\n: \npatient\n,\n      \nresource\n: {\n        \nresourceType\n: \nPatient\n,\n        \nid\n: \newUbXT9RWEbSj5wPEdgRaBw3\n,\n        \nidentifier\n: [\n          {\n            \nsystem\n: \nurn:oid:1.2.840.114350\n,\n            \nvalue\n: \n185444\n\n          },\n          {\n            \nsystem\n: \nurn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000\n,\n            \nvalue\n: \n2667\n\n          }\n        ]\n      }\n    },\n    {\n      \nkey\n: \nstudy\n,\n      \nresource\n: {\n        \nresourceType\n: \nImagingStudy\n,\n        \nid\n: \n8i7tbu6fby5ftfbku6fniuf\n,\n        \nuid\n: \nurn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045\n,\n        \nidentifier\n: [\n          {\n            \nsystem\n: \n7678\n,\n            \nvalue\n: \n185444\n\n          }\n        ],\n        \npatient\n: {\n          \nreference\n: \nPatient/ewUbXT9RWEbSj5wPEdgRaBw3\n\n        }\n      }\n    }\n  ]\n}\n\n\n\n\n\n\n\n\n\n\nContext\n\n\nOptionality\n\n\nFHIR operation to generate context\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npatient\n\n\nOptional\n\n\nPatient/{id}?_elements=identifier\n\n\nFHIR Patient resource describing the patient whose chart is currently in context.\n\n\n\n\n\n\nstudy\n\n\nRequired\n\n\nImagingStudy/{id}?_elements=identifier,accession\n\n\nFHIR ImagingStudy resource in context. Note that in addition to the request identifier and accession elements, the DICOM uid and FHIR patient reference are included because they're required by the FHIR specification.\n\n\n\n\n\n\n\n\nswitch-imaging-study\n\n\nDescription: User changed from one open imaging study to another previously opened imaging study. The context documents the study, and optionally patient, for the currently open record.\n\n\nExample:\n\n\n{\n  \ncontext\n: [\n    {\n      \nkey\n: \npatient\n,\n      \nresource\n: {\n        \nresourceType\n: \nPatient\n,\n        \nid\n: \newUbXT9RWEbSj5wPEdgRaBw3\n,\n        \nidentifier\n: [\n          {\n            \nsystem\n: \nurn:oid:1.2.840.114350\n,\n            \nvalue\n: \n185444\n\n          },\n          {\n            \nsystem\n: \nurn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000\n,\n            \nvalue\n: \n2667\n\n          }\n        ]\n      }\n    },\n    {\n      \nkey\n: \nstudy\n,\n      \nresource\n: {\n        \nresourceType\n: \nImagingStudy\n,\n        \nid\n: \n8i7tbu6fby5ftfbku6fniuf\n,\n        \nuid\n: \nurn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045\n,\n        \nidentifier\n: [\n          {\n            \nsystem\n: \n7678\n,\n            \nvalue\n: \n185444\n\n          }\n        ],\n        \npatient\n: {\n          \nreference\n: \nPatient/ewUbXT9RWEbSj5wPEdgRaBw3\n\n        }\n      }\n    }\n  ]\n}\n\n\n\n\n\n\n\n\n\n\nContext\n\n\nOptionality\n\n\nFHIR operation to generate context\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npatient\n\n\nOptional\n\n\nPatient/{id}?_elements=identifier\n\n\nFHIR Patient resource describing the patient whose chart is currently in context.\n\n\n\n\n\n\nstudy\n\n\nRequired\n\n\nImagingStudy/{id}?_elements=identifier,accession\n\n\nFHIR ImagingStudy resource in context. Note that in addition to the request identifier and accession elements, the DICOM uid and FHIR patient reference are included because they're required by the FHIR specification.\n\n\n\n\n\n\n\n\nclose-imaging-study\n\n\nDescription: User closed imaging study.\n\n\nExample:\n\n\n{\n  \ncontext\n: [\n    {\n      \nkey\n: \npatient\n,\n      \nresource\n: {\n        \nresourceType\n: \nPatient\n,\n        \nid\n: \newUbXT9RWEbSj5wPEdgRaBw3\n,\n        \nidentifier\n: [\n          {\n            \nsystem\n: \nurn:oid:1.2.840.114350\n,\n            \nvalue\n: \n185444\n\n          },\n          {\n            \nsystem\n: \nurn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000\n,\n            \nvalue\n: \n2667\n\n          }\n        ]\n      }\n    },\n    {\n      \nkey\n: \nstudy\n,\n      \nresource\n: {\n        \nresourceType\n: \nImagingStudy\n,\n        \nid\n: \n8i7tbu6fby5ftfbku6fniuf\n,\n        \nuid\n: \nurn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045\n,\n        \nidentifier\n: [\n          {\n            \nsystem\n: \n7678\n,\n            \nvalue\n: \n185444\n\n          }\n        ],\n        \npatient\n: {\n          \nreference\n: \nPatient/ewUbXT9RWEbSj5wPEdgRaBw3\n\n        }\n      }\n    }\n  ]\n}\n\n\n\n\n\n\n\n\n\n\nContext\n\n\nOptionality\n\n\nFHIR operation to generate context\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npatient\n\n\nOptional\n\n\nPatient/{id}?_elements=identifier\n\n\nFHIR Patient resource describing the patient whose chart is currently in context.\n\n\n\n\n\n\nstudy\n\n\nRequired\n\n\nImagingStudy/{id}?_elements=identifier,accession\n\n\nFHIR ImagingStudy resource in context. Note that in addition to the request identifier and accession elements, the DICOM uid and FHIR patient reference are included because they're required by the FHIR specification.\n\n\n\n\n\n\n\n\nuser-logout\n\n\nDescription: User gracefully exited the application.\n\n\nExample:\n\n\n{\n}\n\n\nNo Context \n\n\nuser-hibernate\n\n\nDescription: User temporarily suspended her session. The user's session will eventually resume.\n\n\nExample:\n\n\n{\n}\n\n\nNo Context\n\n\nsync-error\n\n\nDescription: A syncronization error has been detected. Inform subscribed clients.\n\n\nExample:\n\n\n{\n  \ncontext\n: [\n    {\n      \nkey\n: \noperationoutcome\n,\n      \nresource\n: {\n        \nresourceType\n: \nOperationOutcome\n,\n        \nissue\n: [\n          {\n            \nseverity\n: \nwarning\n,\n            \ncode\n: \nprocessing\n,\n            \ndiagnostics\n: \nAppId3456 failed to follow context\n\n          }\n        ]\n      }\n    }\n  ]\n}\n\n\n\n\n\n\n\n\n\n\nContext\n\n\nOptionality\n\n\nFHIR operation to generate context\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noperationoutcome\n\n\nOptional\n\n\nOperationOutcome\n\n\nFHIR resource describing an outcome of an unsuccessful system action..", 
            "title": "Current - STU1"
        }, 
        {
            "location": "/specification/STU1/#fhircast", 
            "text": "\"1.0 Draft\" This is the draft of the 1.0 release of the FHIRcast specification. We are currently working towards a 1.0 release and would love your feedback and proposed changes. Look at our  current issue list  and get involved!", 
            "title": "FHIRcast"
        }, 
        {
            "location": "/specification/STU1/#overview", 
            "text": "The FHIRcast specification describes the APIs and interactions to synchronize healthcare applications in real time to show the same clinical content to a user. All data exchanged through the HTTP APIs MUST be sent and received as  JSON  structures, and MUST be transmitted over channels secured using the Hypertext Transfer Protocol (HTTP) over Transport Layer Security (TLS), also known as HTTPS and defined in  RFC2818 . FHIRcast is modeled on the webhook design pattern and specifically the  W3C WebSub RFC , such as its uses of GET vs POST interactions. FHIRcast also builds on the  HL7 SMART on FHIR launch protocol .   An app subscribes to specific workflow events for a given session, the subscription is verified and the app is notified when those workflow events occur; for example, by the clinician opening a patient's chart. The subscring app may initiate context changes by accessing APIs exposed by the Hub. The app deletes its subscription when it no longer wants to receive notifications. In all cases the app authenticates to the Hub with an OAuth 2.0 bearer token.", 
            "title": "Overview"
        }, 
        {
            "location": "/specification/STU1/#session-discovery", 
            "text": "A session is an abstract concept representing a shared workspace, such as user's login session over multiple applications or a shared view of one application distributed to multiple users. FHIRcast requires a session to have a unique url as an identifier. This url is exchanged as the value of the  hub.topic  parameter. Before establishing a subscription, an app must not only know the  hub.topic , but also the the  hub.url  which contains the base url of the hub.   Systems SHOULD use SMART on FHIR to authorize, authenticate and exchange the  hub.url  and  hub.topic  urls as SMART on FHIR launch context parameters. If using SMART, the app SHALL either be launched from the driving application following the  SMART on FHIR EHR launch  flow or the app may initiate the launch following the  SMART on FHIR standalone launch . In either case, the app SHALL request and, if authorized, SHALL be granted the  fhircast  OAuth2.0 scope. Accompanying this scope grant, the authorization server SHALL supply the  hub.url  and  hub.topic  SMART launch parameters alongside the access token. Per SMART, when scopes of  openid  and  fhirUser  are granted, the authorization server SHALL additionally send the current user's identity in an  id_token .  If not using SMART on FHIR, the mechanism enabling the app to discover the  hub.url  and  hub.topic  is not defined in FHIRcast.", 
            "title": "Session Discovery"
        }, 
        {
            "location": "/specification/STU1/#smart-launch-example", 
            "text": "Note that the SMART launch parameters include the Hub's base url and and the session identifier in the  hub.url  and  hub.topic  fields.  {\n   access_token :  i8hweunweunweofiwweoijewiwe ,\n   token_type :  bearer ,\n   expires_in : 3600,\n   patient :   123 ,\n   encounter :  456 ,\n   imagingstudy :  789 ,\n   hub.url  :  https://hub.example.com ,\n   hub.topic :  https://hub.example.com/7jaa86kgdudewiaq0wtu ,\n}  Although FHIRcast works best with the SMART on FHIR launch and authorization process, implementation-specific launch, authentication, and authorization protocols may be possible. See  other launch scenarios  for guidance.", 
            "title": "SMART Launch Example"
        }, 
        {
            "location": "/specification/STU1/#subscribing-and-unsubscribing", 
            "text": "Subscribing consists of two exchanges:   Subscriber requests a subscription at the  hub.url  url.  Hub confirms the subscription was actually requested by the subscriber by contacting the  hub.callback  url.    Unsubscribing works in the same way, except with a single parameter changed to indicate the desire to unsubscribe.", 
            "title": "Subscribing and Unsubscribing"
        }, 
        {
            "location": "/specification/STU1/#subscription-request", 
            "text": "To create a subscription, the subscribing app SHALL perform an HTTP POST ( RFC7231 ) to the Hub's base url (as specified in  hub.url ) with the parameters in the table below.  This request SHALL have a  Content-Type  header of  application/x-www-form-urlencoded  and SHALL use the following parameters in its body, formatted accordingly:     Field  Optionality  Type  Description      hub.callback  Required  string  The Subscriber's callback URL where notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription.    hub.mode  Required  string  The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request.    hub.topic  Required  string  The uri of the user's session that the subscriber wishes to subscribe to or unsubscribe from.    hub.secret  Required  string  A subscriber-provided cryptographically random unique secret string that SHALL be used to compute an  HMAC digest  delivered in each notification. This parameter SHALL be less than 200 bytes in length.    hub.events  Required  string  Comma-separated list of event types from the Event Catalog for which the Subscriber wants notifications.    hub.lease_seconds  Optional  number  Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. Hubs MAY choose to respect this value or not, depending on their own policies, and MAY set a default value if the subscriber omits the parameter.     If OAuth2 authentication is used, this POST request SHALL contain the Bearer access token in the HTTP Authorization header.  Hubs SHALL allow subscribers to re-request subscriptions that are already activated. Each subsequent and verified request to a Hub to subscribe or unsubscribe SHALL override the previous subscription state for a specific topic / callback URL combination.  The callback URL MAY contain arbitrary query string parameters (e.g.,  ?foo=bar red=fish ). Hubs SHALL preserve the query string during subscription verification by appending new, Hub-defined, parameters to the end of the list using the   (ampersand) character to join. When sending the event notifications, the Hub SHALL make a POST request to the callback URL including any query string parameters in the URL portion of the request, not as POST body parameters.  The client that creates the subscription may not be the same system as the server hosting the callback url. (For example, some type of federated authorization model could possibly exist between these two systems.) However, in FHIRcast, the Hub assumes that the same authorization and access rights apply to both the subscribing client and the callback url.", 
            "title": "Subscription Request"
        }, 
        {
            "location": "/specification/STU1/#subscription-request-example", 
            "text": "In this example, the app asks to be notified of the  open-patient-chart  and  close-patient-chart  events.  POST https://hub.example.com\nHost: hub.example.com\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe\nContent-Type: application/x-www-form-urlencoded\n\nhub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a hub.mode=subscribe hub.topic=https%3A%2F%2Fhub.example.com%2F7jaa86kgdudewiaq0wtu hub.secret=shhh-this-is-a-secret hub.events=patient-open-chart,patient-close-chart", 
            "title": "Subscription Request Example"
        }, 
        {
            "location": "/specification/STU1/#subscription-response", 
            "text": "If the Hub URL supports FHIRcast and is able to handle the subscription or unsubscription request, the Hub MUST respond to a subscription request with an HTTP 202 \"Accepted\" response to indicate that the request was received and will now be verified by the Hub. The Hub SHOULD perform the verification of intent as soon as possible.  If a Hub finds any errors in the subscription request, an appropriate HTTP error response code (4xx or 5xx) MUST be returned. In the event of an error, the Hub SHOULD return a description of the error in the response body as plain text, used to assist the client developer in understanding the error. This is not meant to be shown to the end user. Hubs MAY decide to reject some callback URLs or topic URIs based on their own policies.", 
            "title": "Subscription Response"
        }, 
        {
            "location": "/specification/STU1/#subscription-response-example", 
            "text": "HTTP/1.1 202 Accepted", 
            "title": "Subscription Response Example"
        }, 
        {
            "location": "/specification/STU1/#subscription-denial", 
            "text": "If (and when) the subscription is denied, the Hub SHALL inform the subscriber by sending an HTTP GET request to the subscriber's callback URL as given in the subscription request. This request has the following query string arguments appended, to which the subscriber SHALL respond with an HTTP success (2xx) code.     Field  Optionality  Type  Description      hub.mode  Required  string  The literal string \"denied\".    hub.topic  Required  string  The topic uri given in the corresponding subscription request.    hub.events  Required  string  A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request.    hub.reason  Optional  string  The Hub may include a reason for which the subscription has been denied. The subscription MAY be denied by the Hub at any point (even if it was previously accepted). The Subscriber SHOULD then consider that the subscription is not possible anymore.", 
            "title": "Subscription Denial"
        }, 
        {
            "location": "/specification/STU1/#subscription-denial-example", 
            "text": "GET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=denied hub.topic=https%3A%2F%2Fhub.example.com%2F7jaa86kgdudewiaq0wtu hub.events=open-patient-chart,close-patient-chart hub.reason=session+unexpectedly+stopped HTTP 1.1\nHost: subscriber", 
            "title": "Subscription Denial Example"
        }, 
        {
            "location": "/specification/STU1/#intent-verification", 
            "text": "If the subscription is not denied, the Hub SHALL perform the verification of intent of the subscriber. The  hub.callback  url verification process ensures that the subscriber actually controls the callback url.", 
            "title": "Intent Verification"
        }, 
        {
            "location": "/specification/STU1/#intent-verification-request", 
            "text": "In order to prevent an attacker from creating unwanted subscriptions on behalf of a subscriber (or unsubscribing desired ones), a hub must ensure that the subscriber did indeed send the subscription request. The hub SHALL verify a subscription request by sending an HTTPS GET request to the subscriber's callback URL as given in the subscription request. This request SHALL have the following query string arguments appended     Field  Optionality  Type  Description      hub.mode  Required  string  The literal string \"subscribe\" or \"unsubscribe\", which matches the original request to the hub from the subscriber.    hub.topic  Required  string  The topic session uri given in the corresponding subscription request.    hub.events  Required  string  A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request.    hub.challenge  Required  string  A Hub-generated, random string that SHALL be echoed by the subscriber to verify the subscription.    hub.lease_seconds  Required  number  The Hub-determined number of seconds that the subscription will stay active before expiring, measured from the time the verification request was made from the Hub to the subscriber. If provided to the client, the Hub SHALL unsubscribe the client once lease_seconds has expired. If the subscriber wishes to continue the subscription it MAY resubscribe.", 
            "title": "Intent Verification Request"
        }, 
        {
            "location": "/specification/STU1/#intent-verification-request-example", 
            "text": "GET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=subscribe hub.topic=7jaa86kgdudewiaq0wtu hub.events=open-patient-chart,close-patient-chart hub.challenge=meu3we944ix80ox hub.lease_seconds=7200 HTTP 1.1\nHost: subscriber", 
            "title": "Intent Verification Request Example"
        }, 
        {
            "location": "/specification/STU1/#intent-verification-response", 
            "text": "If the  hub.topic  of the Intent Verification Request corresponds to a pending subscription or unsubscription that the subscriber wishes to carry out it SHALL respond with an HTTP success (2xx) code, a header of  Content-Type: text/html , and a response body equal to the  hub.challenge  parameter. If the subscriber does not agree with the action, the subscriber SHALL respond with a 404 \"Not Found\" response.  The Hub SHALL consider other server response codes (3xx, 4xx, 5xx) to mean that the verification request has failed. If the subscriber returns an HTTP success (2xx) but the content body does not match the  hub.challenge  parameter, the Hub SHALL also consider verification to have failed.", 
            "title": "Intent Verification Response"
        }, 
        {
            "location": "/specification/STU1/#intent-verification-response-example", 
            "text": "HTTP/1.1 200 OK\nContent-Type: text/html\n\nmeu3we944ix80ox", 
            "title": "Intent Verification Response Example"
        }, 
        {
            "location": "/specification/STU1/#unsubscribe", 
            "text": "Once a subscribing app no longer wants to receive event notifications, it MUST unsubscribe from the session. The unsubscribe request message mirrors the subscribe request message with only a single difference: the  hub.mode  MUST be equal to the string  unsubscribe .", 
            "title": "Unsubscribe"
        }, 
        {
            "location": "/specification/STU1/#unsubscribe-request-example", 
            "text": "POST https://hub.example.com\nHost: hub\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe\nContent-Type: application/x-www-form-urlencoded\n\nhub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a hub.mode=unsubscribe hub.topic=https%3A%2F%2Fhub.example.com%2F7jaa86kgdudewiaq0wtu hub.secret=shhh-this-is-a-secret hub.events=open-patient-chart,close-patient-chart", 
            "title": "Unsubscribe Request Example"
        }, 
        {
            "location": "/specification/STU1/#event-notification", 
            "text": "The Hub SHALL notify subscribed apps of workflow events to which the app is subscribed, as the event occurs. The notification is an HTTPS POST containing a JSON object in the request body.", 
            "title": "Event Notification"
        }, 
        {
            "location": "/specification/STU1/#event-notification-request", 
            "text": "Using the  hub.secret  from the subscription request, the hub SHALL generate an HMAC signature of the payload and include that signature in the request headers of the notification. The  X-Hub-Signature  header's value SHALL be in the form  method=signature  where method is one of the recognized algorithm names and signature is the hexadecimal representation of the signature. The signature SHALL be computed using the HMAC algorithm ( RFC6151 ) with the request body as the data and the  hub.secret  as the key.  The notification to the subscriber SHALL include a description of the subscribed event that just occurred, an ISO 8601-2 formatted timestamp in UTC and an event identifier that is universally unique for the Hub. The timestamp MAY be used by subscribers to establish message affinity (message ordering) through the use of a message queue. The event identifier MAY be used to differentiate retried messages from user actions.", 
            "title": "Event Notification Request"
        }, 
        {
            "location": "/specification/STU1/#event-notification-request-details", 
            "text": "The notification's  hub.event  and  context  fields inform the subscriber of the current state of the user's session. The  hub.event  is a user workflow event, from the Event Catalog. The  context  is an array of named FHIR resources (similar to  CDS Hooks's context  field) that describe the current content of the user's session. Each event in the  Event Catalog  defines what context is expected in the notification. Hubs MAY use the  FHIR _elements parameter  to limit the size of the data being passed while also including additional, local identifiers that are likely already in use in production implementations. Subscribers SHALL accept a full FHIR resource or the  _elements -limited resource as defined in the Event Catalog.     Field  Optionality  Type  Description      timestamp  Required  string  ISO 8601-2 timestamp in UTC describing the time at which the event occurred with subsecond accuracy.    id  Required  string  Event identifier used to recognize retried notifications. This id SHALL be unique for the Hub, for example a GUID.    event  Required  object  A json object describing the event. See below.        Field  Optionality  Type  Description      hub.topic  Required  string  The topic session uri given in the subscription request.    hub.event  Required  string  The event that triggered this notification, taken from the list of events from the subscription request.    context  Required  array  An array of named FHIR objects corresponding to the user's context after the given event has occurred. Common FHIR resources are: Patient, Encounter, ImagingStudy and List. The Hub SHALL only return FHIR resources that are authorized to be accessed with the existing OAuth2 access_token.", 
            "title": "Event Notification Request Details"
        }, 
        {
            "location": "/specification/STU1/#event-notification-request-example", 
            "text": "POST https://app.example.com/session/callback/v7tfwuk17a HTTP/1.1\nHost: subscriber\nX-Hub-Signature: sha256=dce85dc8dfde2426079063ad413268ac72dcf845f9f923193285e693be6ff3ae\n\n{\n   timestamp :  2018-01-08T01:37:05.14 ,\n   id :  q9v3jubddqt63n1 ,\n   event : {\n     hub.topic :  https://hub.example.com/7jaa86kgdudewiaq0wtu ,\n     hub.event :  open-patient-chart ,\n     context : [\n      {\n         key :  patient ,\n         resource : {\n           resourceType :  Patient ,\n           id :  ewUbXT9RWEbSj5wPEdgRaBw3 ,\n           identifier : [\n             {\n                type : {\n                     coding : [\n                        {\n                             system :  http://terminology.hl7.org/CodeSystem/v2-0203 ,\n                             value :  MR ,\n                             display :  Medication Record Number \n                         }\n                         text :  MRN \n                      ]\n                  }\n              }\n          ]\n        }\n      }\n    ]\n  }\n}", 
            "title": "Event Notification Request Example"
        }, 
        {
            "location": "/specification/STU1/#event-notification-response", 
            "text": "The subscriber MUST respond to the notification with an appropriate HTTP status code. In the case of a successful notification, the subscriber MUST respond with an HTTP [RFC7231] 2xx response code to indicate a success; otherwise, the subscriber MUST respond with an HTTP error status code. The Hub MAY use these statuses to track synchronization state.", 
            "title": "Event Notification Response"
        }, 
        {
            "location": "/specification/STU1/#event-notification-response-example", 
            "text": "HTTP/1.1 200 OK", 
            "title": "Event Notification Response Example"
        }, 
        {
            "location": "/specification/STU1/#request-context-change", 
            "text": "Similar to the Hub's notifications to the subscriber, the subscriber MAY request context changes with an HTTP POST to the  hub.topic  url. The Hub SHALL either accept this context change by responding with any successful HTTP status or reject it by responding with any 4xx or 5xx HTTP status. The subscriber SHALL be capable of gracefully handling a rejected context request.   Once a requested context change is accepted, the Hub SHALL broadcast the context notification to all subscribers, including the original requestor.", 
            "title": "Request Context Change"
        }, 
        {
            "location": "/specification/STU1/#request-context-change-request", 
            "text": "", 
            "title": "Request Context Change Request"
        }, 
        {
            "location": "/specification/STU1/#request-context-change-parameters", 
            "text": "Field  Optionality  Type  Description      timestamp  Required  string  ISO 8601-2 timestamp in UTC describing the time at which the event occurred with subsecond accuracy.    id  Required  string  Event identifier used to recognize retried notifications. This id SHALL be uniquely generated by the subscriber and could be a GUID. Following an accepted context change request, the hub MAY re-use this value in the broadcasted event notifications.    event  Required  object  A json object describing the event. See  below .", 
            "title": "Request Context Change Parameters"
        }, 
        {
            "location": "/specification/STU1/#request-context-change-event-object-parameters", 
            "text": "Field  Optionality  Type  Description      hub.topic  Required  string  The topic session URI given in the subscription request.    hub.event  Required  string  The event that triggered this request for the subscriber, taken from the list of events from the subscription request.    context  Required  array  An array of named FHIR objects corresponding to the user's context after the given event has occurred. Common FHIR resources are: Patient, Encounter, ImagingStudy and List. The subscriber SHALL only include FHIR resources that are authorized to be accessed with the existing OAuth2  access_token .     POST https://hub.example.com/7jaa86kgdudewiaq0wtu HTTP/1.1\nHost: hub\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe\nContent-Type: application/json\n\n{\n   timestamp :  2018-01-08T01:40:05.14 ,\n   id :  wYXStHqxFQyHFELh ,\n   event : {\n     hub.topic :  https://hub.example.com/7jaa86kgdudewiaq0wtu ,\n     hub.event :  close-patient-chart ,\n     context : [\n      {\n         key :  patient ,\n         resource : {\n           resourceType :  Patient ,\n           id :  798E4MyMcpCWHab9 ,\n           identifier : [\n             {\n                type : {\n                     coding : [\n                        {\n                             system :  http://terminology.hl7.org/CodeSystem/v2-0203 ,\n                             value :  MR ,\n                             display :  Medication Record Number \n                         }\n                         text :  MRN \n                      ]\n                  }\n              }\n          ]\n        }\n      }\n    ]\n  }\n}", 
            "title": "Request Context Change Event Object Parameters"
        }, 
        {
            "location": "/specification/STU1/#event-notification-errors", 
            "text": "If the subscriber cannot follow the context of the event, for instance due to an error or a deliberate choice to not follow a context, the subscriber MAY respond with a 'sync-error' event. The Hub MAY use these events to track synchronization state and MAY also forward these events to other subscribers of the same topic.", 
            "title": "Event Notification Errors"
        }, 
        {
            "location": "/specification/STU1/#event-notification-error-example", 
            "text": "POST https://hub.example.com/7jaa86kgdudewiaq0wtu HTTP/1.1\nHost: hub\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe\nContent-Type: application/json\n\n{\n   timestamp :  2018-01-08T01:37:05.14 ,\n   id :  q9v3jubddqt63n1 ,\n   event : {\n     hub.topic :  https://hub.example.com/7jaa86kgdudewiaq0wtu ,\n     hub.event :  sync-error ,\n     context : [\n      {\n         key :  operationoutcome ,\n         resource : {\n           resourceType :  OperationOutcome ,\n           issue : [\n            {\n               severity :  warning ,\n               code :  processing ,\n               diagnostics :  AppId3456 failed to follow context \n            }\n          ]\n        }\n      }\n    ]\n  }\n}", 
            "title": "Event Notification Error Example"
        }, 
        {
            "location": "/specification/STU1/#event-catalog", 
            "text": "Each event definition in the catalog, below, specifies a single event name, a description of the event, and the  required or optional contextual information associated with the event. Alongside the event name, the contextual information is used by the subscriber.  FHIR is the interoperable data model used by FHIRcast. The fields within  context  are subsets of FHIR resources. Hubs MUST send the results of FHIR reads in the context, as specified below. For example, when the  open-image-study  event occurs, the notification sent to a subscriber MUST include the ImagingStudy FHIR resource. Hubs SHOULD send the results of an ImagingStudy FHIR read using the  _elements  query parameter, like so:   ImagingStudy/{id}?_elements=identifier,accession  and in accordance with the  FHIR specification .   A FHIR server may not support the  _elements  query parameter; a subscriber MUST gracefully handle receiving a full FHIR resource in the context of a notification.  The name of the event SHOULD succinctly and clearly describe the activity or event. Event names are unique so event creators SHOULD take care to ensure newly proposed events do not conflict with an existing event name. Event creators SHALL name their event with reverse domain notation (e.g.  org.example.patient-transmogrify ) if the event is specific to an organization. Reverse domain notation SHALL not be used by a standard event catalog.", 
            "title": "Event Catalog"
        }, 
        {
            "location": "/specification/STU1/#open-patient-chart", 
            "text": "", 
            "title": "open-patient-chart"
        }, 
        {
            "location": "/specification/STU1/#description", 
            "text": "User opened patient's medical record.", 
            "title": "Description:"
        }, 
        {
            "location": "/specification/STU1/#example", 
            "text": "{\n   context : [\n    {\n       key :  patient ,\n       resource : {\n         resourceType :  Patient ,\n         id :  ewUbXT9RWEbSj5wPEdgRaBw3 ,\n         identifier : [\n           {\n              type : {\n                   coding : [\n                      {\n                           system :  http://terminology.hl7.org/CodeSystem/v2-0203 ,\n                           value :  MR ,\n                           display :  Medication Record Number \n                       }\n                       text :  MRN \n                    ]\n                }\n            }\n        ]\n      }\n    }\n  ]\n}     Context  Optionality  FHIR operation to generate context  Description      patient  Required  Patient/{id}?_elements=identifier  FHIR Patient resource describing the patient whose chart is currently in context.    encounter  Optional  Encounter/{id}?_elements=identifier  FHIR Encounter resource in context in the newly opened patient's chart.", 
            "title": "Example:"
        }, 
        {
            "location": "/specification/STU1/#switch-patient-chart", 
            "text": "", 
            "title": "switch-patient-chart"
        }, 
        {
            "location": "/specification/STU1/#description_1", 
            "text": "User changed from one open patient's medical record to another previously opened patient's medical record. The context documents the patient whose record is currently open.", 
            "title": "Description:"
        }, 
        {
            "location": "/specification/STU1/#example_1", 
            "text": "{\n   context : [\n    {\n       key :  patient ,\n       resource : {\n         resourceType :  Patient ,\n         id :  ewUbXT9RWEbSj5wPEdgRaBw3 ,\n         identifier : [\n           {\n              type : {\n                   coding : [\n                      {\n                           system :  http://terminology.hl7.org/CodeSystem/v2-0203 ,\n                           value :  MR ,\n                           display :  Medication Record Number \n                       }\n                       text :  MRN \n                    ]\n                }\n            }\n        ]\n      }\n    }\n  ]\n}     Context  Optionality  FHIR operation to generate context  Description      patient  Required  Patient/{id}?_elements=identifier  FHIR Patient resource describing the patient whose chart is currently in context..    encounter  Optional  Encounter/{id}?_elements=identifier  FHIR Encounter resource in context in the newly opened patient's chart.", 
            "title": "Example:"
        }, 
        {
            "location": "/specification/STU1/#close-patient-chart", 
            "text": "", 
            "title": "close-patient-chart"
        }, 
        {
            "location": "/specification/STU1/#description-user-closed-patients-medical-record", 
            "text": "", 
            "title": "Description: User closed patient's medical record."
        }, 
        {
            "location": "/specification/STU1/#example_2", 
            "text": "{\n   context : [\n    {\n       key :  patient ,\n       resource : {\n         resourceType :  Patient ,\n         id :  ewUbXT9RWEbSj5wPEdgRaBw3 ,\n         identifier : [\n           {\n              type : {\n                   coding : [\n                      {\n                           system :  http://terminology.hl7.org/CodeSystem/v2-0203 ,\n                           value :  MR ,\n                           display :  Medication Record Number \n                       }\n                       text :  MRN \n                    ]\n                }\n            }\n        ]\n      }\n    }\n  ]\n}     Context  Optionality  FHIR operation to generate context  Description      patient  Required  Patient/{id}?_elements=identifier  FHIR Patient resource describing the patient whose chart is currently in context..    encounter  Optional  Encounter/{id}?_elements=identifier  FHIR Encounter resource in context in the newly opened patient's chart.", 
            "title": "Example:"
        }, 
        {
            "location": "/specification/STU1/#open-imaging-study", 
            "text": "", 
            "title": "open-imaging-study"
        }, 
        {
            "location": "/specification/STU1/#description-user-opened-record-of-imaging-study", 
            "text": "", 
            "title": "Description: User opened record of imaging study."
        }, 
        {
            "location": "/specification/STU1/#example_3", 
            "text": "{\n   context : [\n    {\n       key :  patient ,\n       resource : {\n         resourceType :  Patient ,\n         id :  ewUbXT9RWEbSj5wPEdgRaBw3 ,\n         identifier : [\n          {\n             system :  urn:oid:1.2.840.114350 ,\n             value :  185444 \n          },\n          {\n             system :  urn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000 ,\n             value :  2667 \n          }\n        ]\n      }\n    },\n    {\n       key :  study ,\n       resource : {\n         resourceType :  ImagingStudy ,\n         id :  8i7tbu6fby5ftfbku6fniuf ,\n         uid :  urn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045 ,\n         identifier : [\n          {\n             system :  7678 ,\n             value :  185444 \n          }\n        ],\n         patient : {\n           reference :  Patient/ewUbXT9RWEbSj5wPEdgRaBw3 \n        }\n      }\n    }\n  ]\n}     Context  Optionality  FHIR operation to generate context  Description      patient  Optional  Patient/{id}?_elements=identifier  FHIR Patient resource describing the patient whose chart is currently in context.    study  Required  ImagingStudy/{id}?_elements=identifier,accession  FHIR ImagingStudy resource in context. Note that in addition to the request identifier and accession elements, the DICOM uid and FHIR patient reference are included because they're required by the FHIR specification.", 
            "title": "Example:"
        }, 
        {
            "location": "/specification/STU1/#switch-imaging-study", 
            "text": "", 
            "title": "switch-imaging-study"
        }, 
        {
            "location": "/specification/STU1/#description-user-changed-from-one-open-imaging-study-to-another-previously-opened-imaging-study-the-context-documents-the-study-and-optionally-patient-for-the-currently-open-record", 
            "text": "", 
            "title": "Description: User changed from one open imaging study to another previously opened imaging study. The context documents the study, and optionally patient, for the currently open record."
        }, 
        {
            "location": "/specification/STU1/#example_4", 
            "text": "{\n   context : [\n    {\n       key :  patient ,\n       resource : {\n         resourceType :  Patient ,\n         id :  ewUbXT9RWEbSj5wPEdgRaBw3 ,\n         identifier : [\n          {\n             system :  urn:oid:1.2.840.114350 ,\n             value :  185444 \n          },\n          {\n             system :  urn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000 ,\n             value :  2667 \n          }\n        ]\n      }\n    },\n    {\n       key :  study ,\n       resource : {\n         resourceType :  ImagingStudy ,\n         id :  8i7tbu6fby5ftfbku6fniuf ,\n         uid :  urn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045 ,\n         identifier : [\n          {\n             system :  7678 ,\n             value :  185444 \n          }\n        ],\n         patient : {\n           reference :  Patient/ewUbXT9RWEbSj5wPEdgRaBw3 \n        }\n      }\n    }\n  ]\n}     Context  Optionality  FHIR operation to generate context  Description      patient  Optional  Patient/{id}?_elements=identifier  FHIR Patient resource describing the patient whose chart is currently in context.    study  Required  ImagingStudy/{id}?_elements=identifier,accession  FHIR ImagingStudy resource in context. Note that in addition to the request identifier and accession elements, the DICOM uid and FHIR patient reference are included because they're required by the FHIR specification.", 
            "title": "Example:"
        }, 
        {
            "location": "/specification/STU1/#close-imaging-study", 
            "text": "", 
            "title": "close-imaging-study"
        }, 
        {
            "location": "/specification/STU1/#description-user-closed-imaging-study", 
            "text": "", 
            "title": "Description: User closed imaging study."
        }, 
        {
            "location": "/specification/STU1/#example_5", 
            "text": "{\n   context : [\n    {\n       key :  patient ,\n       resource : {\n         resourceType :  Patient ,\n         id :  ewUbXT9RWEbSj5wPEdgRaBw3 ,\n         identifier : [\n          {\n             system :  urn:oid:1.2.840.114350 ,\n             value :  185444 \n          },\n          {\n             system :  urn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000 ,\n             value :  2667 \n          }\n        ]\n      }\n    },\n    {\n       key :  study ,\n       resource : {\n         resourceType :  ImagingStudy ,\n         id :  8i7tbu6fby5ftfbku6fniuf ,\n         uid :  urn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045 ,\n         identifier : [\n          {\n             system :  7678 ,\n             value :  185444 \n          }\n        ],\n         patient : {\n           reference :  Patient/ewUbXT9RWEbSj5wPEdgRaBw3 \n        }\n      }\n    }\n  ]\n}     Context  Optionality  FHIR operation to generate context  Description      patient  Optional  Patient/{id}?_elements=identifier  FHIR Patient resource describing the patient whose chart is currently in context.    study  Required  ImagingStudy/{id}?_elements=identifier,accession  FHIR ImagingStudy resource in context. Note that in addition to the request identifier and accession elements, the DICOM uid and FHIR patient reference are included because they're required by the FHIR specification.", 
            "title": "Example:"
        }, 
        {
            "location": "/specification/STU1/#user-logout", 
            "text": "", 
            "title": "user-logout"
        }, 
        {
            "location": "/specification/STU1/#description-user-gracefully-exited-the-application", 
            "text": "", 
            "title": "Description: User gracefully exited the application."
        }, 
        {
            "location": "/specification/STU1/#example_6", 
            "text": "{\n}  No Context", 
            "title": "Example:"
        }, 
        {
            "location": "/specification/STU1/#user-hibernate", 
            "text": "", 
            "title": "user-hibernate"
        }, 
        {
            "location": "/specification/STU1/#description-user-temporarily-suspended-her-session-the-users-session-will-eventually-resume", 
            "text": "", 
            "title": "Description: User temporarily suspended her session. The user's session will eventually resume."
        }, 
        {
            "location": "/specification/STU1/#example_7", 
            "text": "{\n}  No Context", 
            "title": "Example:"
        }, 
        {
            "location": "/specification/STU1/#sync-error", 
            "text": "", 
            "title": "sync-error"
        }, 
        {
            "location": "/specification/STU1/#description-a-syncronization-error-has-been-detected-inform-subscribed-clients", 
            "text": "", 
            "title": "Description: A syncronization error has been detected. Inform subscribed clients."
        }, 
        {
            "location": "/specification/STU1/#example_8", 
            "text": "{\n   context : [\n    {\n       key :  operationoutcome ,\n       resource : {\n         resourceType :  OperationOutcome ,\n         issue : [\n          {\n             severity :  warning ,\n             code :  processing ,\n             diagnostics :  AppId3456 failed to follow context \n          }\n        ]\n      }\n    }\n  ]\n}     Context  Optionality  FHIR operation to generate context  Description      operationoutcome  Optional  OperationOutcome  FHIR resource describing an outcome of an unsuccessful system action..", 
            "title": "Example:"
        }, 
        {
            "location": "/specification/May2019Ballot/", 
            "text": "FHIRcast\n\n\n\n\n\"1.0 Draft\" This is the draft of the 1.0 release of the FHIRcast specification. We are currently working towards a 1.0 release and would love your feedback and proposed changes. Look at our \ncurrent issue list\n and get involved!\n\n\n\n\nOverview\n\n\nThe FHIRcast specification describes the APIs and interactions to synchronize healthcare applications in real time to show the same clinical content to a user. All data exchanged through the HTTP APIs MUST be sent and received as \nJSON\n structures, and MUST be transmitted over channels secured using the Hypertext Transfer Protocol (HTTP) over Transport Layer Security (TLS), also known as HTTPS and defined in \nRFC2818\n. FHIRcast is modeled on the webhook design pattern and specifically the \nW3C WebSub RFC\n and builds on the \nHL7 SMART on FHIR launch protocol\n. \n\n\nAn app subscribes to specific workflow events for a given session, the subscription is verified and the app is notified when those workflow events occur; for example, by the clinician opening a patient's chart. The subscring app may query a session's current context and initiate context changes by accessing APIs exposed by the Hub. The app deletes its subscription when it no longer wants to receive notifications. In all cases the app authenticates to the Hub with an OAuth 2.0 bearer token. \n\n\nSession Discovery\n\n\nBefore establishing a subscription, an app must know the \nhub.topic\n which is an unique url identifying the session, and the \ncast-hub\n which is the base url of the Hub. The app discovers these two urls as part of a SMART on FHIR launch. \n\n\nThe app MUST either be launched from the driving application following the \nSMART on FHIR EHR launch\n flow or the app may initiate the launch following the \nSMART on FHIR standalone launch\n. In either case, the app MUST request and be granted the \nfhircast\n OAuth2.0 scope. Accompanying this scope grant, the authorization server MUST supply the \ncast-hub\n and \nhub.topic\n SMART launch parameters alongside the access token. These parameters identify the Hub's base url, and a unique, opaque identifier of the current user's session, respectivly. Per SMART, when scopes of \nopenid\n and \nfhirUser\n are granted, the app will additionally receive the current user's identity in an \nid_token\n.\n\n\nSMART Launch Example\n\n\nNote that the SMART launch parameters include the Hub's base url and and the session identifier in the \ncast-hub\n and \nhub.topic\n fields.\n\n\n{\n  \naccess_token\n: \ni8hweunweunweofiwweoijewiwe\n,\n  \ntoken_type\n: \nbearer\n,\n  \nexpires_in\n: 3600,\n  \npatient\n:  \n123\n,\n  \nencounter\n: \n456\n,\n  \nimagingstudy\n: \n789\n,\n  \ncast-hub\n : \nhttps://hub.example.com\n,\n  \nhub.topic\n: \nhttps://hub.example.com/7jaa86kgdudewiaq0wtu\n,\n}\n\n\n\n\nAlthough FHIRcast works best with the SMART on FHIR launch and authorization process, implementation-specific launch, authentication, and authorization  protocols may be possible. See \nother launch scenarios\n for guidance.\n\n\nSubscribing and Unsubscribing\n\n\nSubscribing consists of two exchanges:\n\n\n\n\nSubscriber requests a subscription at the \ncast-hub\n url.\n\n\nHub confirms the subscription was actually requested by the subscriber by contacting the \nhub.callback\n url. \n\n\n\n\nUnsubscribing works in the same way, except with a single parameter changed to indicate the desire to unsubscribe.\n\n\nSubscription Request\n\n\nTo create a subscription, the subscribing app performs an HTTP POST (\nRFC7231\n) to the Hub's base url (as specified in \ncast-hub\n) with the following parameters, authenticating with the Bearer access token.\n\n\nThis request MUST have a Content-Type header of \napplication/x-www-form-urlencoded\n  and MUST use the following parameters in its body, formatted accordingly:\n\n\nSubscription Request Parameters\n\n\n\n\n\n\n\n\nField\n\n\nOptionality\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhub.callback\n\n\nRequired\n\n\nstring\n\n\nThe Subscriber's callback URL where notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription.\n\n\n\n\n\n\nhub.mode\n\n\nRequired\n\n\nstring\n\n\nThe literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request.\n\n\n\n\n\n\nhub.topic\n\n\nRequired\n\n\nstring\n\n\nThe uri of the user's session that the subscriber wishes to subscribe to or unsubscribe from.\n\n\n\n\n\n\nhub.secret\n\n\nRequired\n\n\nstring\n\n\nA subscriber-provided cryptographically random unique secret string that will be used to compute an HMAC digest delivered in each notification. This parameter MUST be less than 200 bytes in length.\n\n\n\n\n\n\nhub.events\n\n\nRequired\n\n\nstring\n\n\nComma-separated list of event types from the Event Catalog for which the Subscriber wants notifications.\n\n\n\n\n\n\nhub.lease_seconds\n\n\nOptional\n\n\nnumber\n\n\nNumber of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. Hubs MAY choose to respect this value or not, depending on their own policies, and MAY set a default value if the subscriber omits the parameter.\n\n\n\n\n\n\n\n\nHubs MUST allow subscribers to re-request subscriptions that are already activated. Each subsequent request to a hub to subscribe or unsubscribe MUST override the previous subscription state for a specific topic, and callback URL combination once the action is verified. \n\n\nThe callback URL MAY contain arbitrary query string parameters (e.g., ?foo=bar\nred=fish). Hubs MUST preserve the query string during subscription verification by appending new parameters to the end of the list using the \n (ampersand) character to join. When sending the content distribution request, the hub will make a POST request to the callback URL including any query string parameters in the URL portion of the request, not as POST body parameters.\n\n\nWithin FHIRcast, the client that creates a subscription and the server that hosts the callback url are the same entity. If these roles are split, the Hub assumes that the same authorization and access rights apply to both systems. \n\n\nSubscription Request Example\n\n\nIn this example, the app asks to be notified of the \nopen-patient-chart\n and \nclose-patient-chart\n events.\n\n\nPOST https://hub.example.com\nHost: hub.example.com\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe\nContent-Type: application/x-www-form-urlencoded\n\nhub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a\nhub.mode=subscribe\nhub.topic=https%3A%2F%2Fhub.example.com%2F7jaa86kgdudewiaq0wtu\nhub.secret=shhh-this-is-a-secret\nhub.events=patient-open-chart,patient-close-chart\n\n\n\n\nSubscription Response\n\n\nIf the Hub URL supports FHIRcast and is able to handle the subscription or unsubscription request, the Hub MUST respond to a subscription request with an HTTP 202 \"Accepted\" response to indicate that the request was received and will now be verified by the Hub. The Hub SHOULD perform the verification of intent as soon as possible.\n\n\nIf a Hub finds any errors in the subscription request, an appropriate HTTP error response code (4xx or 5xx) MUST be returned. In the event of an error, the Hub SHOULD return a description of the error in the response body as plain text, used to assist the client developer in understanding the error. This is not meant to be shown to the end user. Hubs MAY decide to reject some callback URLs or topic URIs based on their own policies.\n\n\nSubscription Response Example\n\n\nHTTP/1.1 202 Accepted\n\n\n\n\nSubscription Denial\n\n\nIf (and when) the subscription is denied, the Hub MUST inform the subscriber by sending an HTTP GET request to the subscriber's callback URL as given in the subscription request. This request has the following query string arguments appended.\n\n\nSubscription Denial Parameters\n\n\n\n\n\n\n\n\nField\n\n\nOptionality\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhub.mode\n\n\nRequired\n\n\nstring\n\n\nThe literal string \"denied\".\n\n\n\n\n\n\nhub.topic\n\n\nRequired\n\n\nstring\n\n\nThe topic uri given in the corresponding subscription request.\n\n\n\n\n\n\nhub.events\n\n\nRequired\n\n\nstring\n\n\nA comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request.\n\n\n\n\n\n\nhub.reason\n\n\nOptional\n\n\nstring\n\n\nThe Hub may include a reason for which the subscription has been denied. The subscription MAY be denied by the Hub at any point (even if it was previously accepted). The Subscriber SHOULD then consider that the subscription is not possible anymore.\n\n\n\n\n\n\n\n\nSubscription Denial Example\n\n\nGET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=denied\nhub.topic=https%3A%2F%2Fhub.example.com%2F7jaa86kgdudewiaq0wtu\nhub.events=open-patient-chart,close-patient-chart\nhub.challenge=meu3we944ix80ox\nhub.reason=session+unexpectedly+stopped HTTP 1.1\nHost: subscriber\n\n\n\n\nIntent Verification\n\n\nIf (and when) the subscription is accepted, the Hub MUST perform the verification of intent of the subscriber. The \nhub.callback\n url verification process ensures that the subscriber actually controls the callback url.\n\n\nIntent Verification Request\n\n\nIn order to prevent an attacker from creating unwanted subscriptions on behalf of a subscriber (or unsubscribing desired ones), a Hub must ensure that the subscriber did indeed send the subscription request. The Hub verifies a subscription request by sending an HTTPS GET (\nRFC2818\n) request to the subscriber's callback URL as given in the subscription request. This request has the following query string arguments appended:\n\n\nVerification Parameters\n\n\n\n\n\n\n\n\nField\n\n\nOptionality\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhub.mode\n\n\nRequired\n\n\nstring\n\n\nThe literal string \"subscribe\" or \"unsubscribe\", which matches the original request to the hub from the subscriber.\n\n\n\n\n\n\nhub.topic\n\n\nRequired\n\n\nstring\n\n\nThe topic session uri given in the corresponding subscription request.\n\n\n\n\n\n\nhub.events\n\n\nRequired\n\n\nstring\n\n\nA comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request.\n\n\n\n\n\n\nhub.challenge\n\n\nRequired\n\n\nstring\n\n\nA Hub-generated, random string that MUST be echoed by the subscriber to verify the subscription.\n\n\n\n\n\n\nhub.lease_seconds\n\n\nRequired\n\n\nnumber\n\n\nThe Hub-determined number of seconds that the subscription will stay active before expiring, measured from the time the verification request was made from the Hub to the subscriber. Subscribers must renew their subscription before the lease seconds period is over to avoid interruption.\n\n\n\n\n\n\n\n\nIntent Verification Request Example\n\n\nGET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=subscribe\nhub.topic=7jaa86kgdudewiaq0wtu\nhub.events=open-patient-chart,close-patient-chart\nhub.challenge=meu3we944ix80ox HTTP 1.1\nHost: subscriber\n\n\n\n\nIntent Verification Response\n\n\nThe subscriber MUST confirm that the \nhub.topic\n corresponds to a pending subscription or unsubscription that it wishes to carry out. If so, the subscriber MUST respond with an HTTP success (2xx) code with a response body equal to the \nhub.challenge\n parameter. If the subscriber does not agree with the action, the subscriber MUST respond with a 404 \"Not Found\" response.\n\n\nThe Hub MUST consider other server response codes (3xx, 4xx, 5xx) to mean that the verification request has failed. If the subscriber returns an HTTP success (2xx) but the content body does not match the \nhub.challenge\n parameter, the Hub MUST also consider verification to have failed.\n\n\nIntent Verification Response Example\n\n\nHTTP/1.1 200 Success\nContent-Type: text/html\n\nmeu3we944ix80ox\n\n\n\n\nUnsubscribe\n\n\nOnce a subscribing app no longer wants to receive event notifications, it MUST unsubscribe from the session. The unsubscribe request message mirrors the subscribe request message with only a single difference: the \nhub.mode\n MUST be equal to the string \nunsubscribe\n.\n\n\nUnsubscribe Request Example\n\n\nPOST https://hub.example.com\nHost: hub\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe\nContent-Type: application/x-www-form-urlencoded\n\nhub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a\nhub.mode=unsubscribe\nhub.topic=https%3A%2F%2Fhub.example.com%2F7jaa86kgdudewiaq0wtu\nhub.secret=shhh-this-is-a-secret\nhub.events=open-patient-chart,close-patient-chart\n\n\n\n\n\nEvent Notification\n\n\nThe Hub MUST notify subscribed apps of workflow events to which the app is subscribed, as the event occurs. The notification is an HTTPS POST containing a JSON object in the request body.\n\n\nEvent Notification Request\n\n\nUsing the hub.secret from the subscription request, the hub MUST generate an HMAC signature of the payload and include that signature in the request headers of the notification. The \nX-Hub-Signature\n header's value MUST be in the form \nmethod=signature\n where method is one of the recognized algorithm names and signature is the hexadecimal representation of the signature. The signature MUST be computed using the HMAC algorithm (\nRFC6151\n) with the request body as the data and the \nhub.secret\n as the key.\n\n\nIn addition to a description of the subscribed event that just occurred, the notification to the subscriber MUST include an \nISO 8601-2\n formatted timestamp in UTC and an event identifer that is universally unique for the Hub. See the \nnotification parameters table\n for details. The timestamp should be used by subscribers to establish message affinity through the use of a message queue. The event identifier should be used to differentiate retried messages from user actions. \n\n\nEvent Notification Request Details\n\n\nThe notification's \nhub.event\n and \ncontext\n fields inform the subscriber of the current state of the user's session. The \nhub.event\n is a user workflow event, from the Event Catalog. The \ncontext\n is an array of named FHIR objects (similar to \nCDS Hooks's context\n field) that describe the current content of the user's session. Each event in the \nEvent Catalog\n defines what context is expected in the notification. Hubs MAY use the \nFHIR _elements parameter\n to limit the size of the data being passed while also including additional, local identifiers that are likely already in use in production implementations. Subscribers MUST accept a full FHIR resource or the \n_elements\n-limited resource as defined in the Event Catalog.\n\n\nNotification Parameters\n\n\n\n\n\n\n\n\nField\n\n\nOptionality\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntimestamp\n\n\nRequired\n\n\nstring\n\n\nISO 8601-2 timestamp in UTC describing the time at which the event occurred with subsecond accuracy.\n\n\n\n\n\n\nid\n\n\nRequired\n\n\nstring\n\n\nEvent identifier used to recognize retried notifications. This id MUST be globally unique for the Hub, SHOULD be opaque to the subscriber and MAY be a GUID.\n\n\n\n\n\n\nevent\n\n\nRequired\n\n\nobject\n\n\nA json object describing the event. See \nbelow\n.\n\n\n\n\n\n\n\n\nEvent Object Parameters\n\n\n\n\n\n\n\n\nField\n\n\nOptionality\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhub.topic\n\n\nRequired\n\n\nstring\n\n\nThe topic session uri given in the subscription request.\n\n\n\n\n\n\nhub.event\n\n\nRequired\n\n\nstring\n\n\nThe event that triggered this notification, taken from the list of events from the subscription request.\n\n\n\n\n\n\ncontext\n\n\nRequired\n\n\narray\n\n\nAn array of named FHIR objects corresponding to the user's context after the given event has occurred. Common FHIR resources are: Patient, Encounter, ImagingStudy and List. The Hub MUST only return FHIR resources that are authorized to be accessed with the existing OAuth2 access_token.\n\n\n\n\n\n\n\n\nEvent Notification Request Example\n\n\nPOST https://app.example.com/session/callback/v7tfwuk17a HTTP/1.1\nHost: subscriber\nX-Hub-Signature: sha256=dce85dc8dfde2426079063ad413268ac72dcf845f9f923193285e693be6ff3ae\n\n{\n  \ntimestamp\n: \n2018-01-08T01:37:05.14\n,\n  \nid\n: \nq9v3jubddqt63n1\n,\n  \nevent\n: {\n    \nhub.topic\n: \nhttps://hub.example.com/7jaa86kgdudewiaq0wtu\n,\n    \nhub.event\n: \nopen-patient-chart\n,\n    \ncontext\n: [\n      {\n        \nkey\n: \npatient\n,\n        \nresource\n: {\n          \nresourceType\n: \nPatient\n,\n          \nid\n: \newUbXT9RWEbSj5wPEdgRaBw3\n,\n          \nidentifier\n: [\n             {\n               \ntype\n: {\n                    \ncoding\n: [\n                        {\n                            \nsystem\n: \nhttp://terminology.hl7.org/CodeSystem/v2-0203\n,\n                            \nvalue\n: \nMR\n,\n                            \ndisplay\n: \nMedication Record Number\n\n                         }\n                        \ntext\n: \nMRN\n\n                      ]\n                  }\n              }\n          ]\n        }\n      }\n    ]\n  }\n}\n\n\n\n\nEvent Notification Response\n\n\nThe subscriber MUST respond to the notification with an appropriate HTTP status code. In the case of a successful notification, the subscriber MUST respond with an HTTP 200; otherwise, the subscriber MUST respond with an HTTP error status code. The Hub MAY use these statuses to track synchronization state.\n\n\nEvent Notification Response Example\n\n\nHTTP/1.1 200 Accepted\n\n\n\n\nQuery for Current Context\n\n\nIn addition to receiving notification of events as they occur, a subscribing app may request the current context of a given session. The client queries the Hub's \nhub.topic\n url to receive the current context for the session. Event-driven context notifications should take precedence. Note that no \nhub.event\n is present in the response.\n\n\nQuery for Current Context Example\n\n\nGET https://hub.example.com/7jaa86kgdudewiaq0wtu \nHost: hub\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe\n\n\n\n\n{\n   \ntimestamp\n:\n2018-01-08T01:40:05.14\n,\n   \nid\n:\nwYXStHqxFQyHFELh\n,\n   \nevent\n:{\n      \nhub.topic\n:\nhttps://hub.example.com/7jaa86kgdudewiaq0wtu\n,\n      \ncontext\n:[\n         {\n            \nkey\n:\npatient\n,\n            \nresource\n:{\n               \nresourceType\n:\nPatient\n,\n               \nid\n:\n798E4MyMcpCWHab9\n,\n               \nidentifier\n: [\n                 {\n                   \ntype\n: {\n                        \ncoding\n: [\n                            {\n                                \nsystem\n: \nhttp://terminology.hl7.org/CodeSystem/v2-0203\n,\n                                \nvalue\n: \nMR\n,\n                                \ndisplay\n: \nMedication Record Number\n\n                             }\n                            \ntext\n: \nMRN\n\n                          ]\n                      }\n                  }\n              ]\n            }\n         },\n         {\n            \nkey\n:\nencounter\n,\n            \nresource\n:{\n               \nresourceType\n:\nEncounter\n,\n               \nid\n:\necgXt3jVqNNpsXnNXZ3KljA3\n,\n               \nidentifier\n:[\n                  {\n                     \nuse\n:\nusual\n,\n                     \nsystem\n:\nhttp://healthcare.example.org/identifiers/encounter\n,\n                     \nvalue\n:\n1853\n\n                  }\n               ]\n            }\n         },\n         {\n            \nkey\n:\nstudy\n,\n            \nresource\n:{\n               \nresourceType\n:\nImagingStudy\n,\n               \nid\n:\n8i7tbu6fby5ftfbku6fniuf\n,\n               \nuid\n:\nurn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045\n,\n               \naccession\n:{\n                  \nuse\n:\nusual\n,\n                  \ntype\n:{\n                     \ncoding\n:[\n                        {\n                           \nsystem\n:\nhttp://hl7.org/fhir/v2/0203\n,\n                           \ncode\n:\nACSN\n\n                        }\n                     ]\n                  }\n               },\n               \nidentifier\n:[\n                  {\n                     \nsystem\n:\n7678\n,\n                     \nvalue\n:\n185444\n\n                  }\n               ]\n            }\n         }\n      ]\n   }\n}\n\n\n\n\nRequest Context Change\n\n\nSimilar to the Hub's notifications to the subscriber, the subscriber MAY request context changes with an HTTP POST to the \nhub.topic\n url. The Hub MUST either accept this context change by responding with any successful HTTP status or reject it by responding with any 4xx or 5xx HTTP status. The subscriber MUST be capable of gracefully handling a rejected context request. \n\n\nOnce a requested context change is accepted, the Hub MUST broadcast the context notification to all subscribers, including the original requestor. \n\n\nRequest Context Change Request\n\n\nPOST https://hub.example.com/7jaa86kgdudewiaq0wtu HTTP/1.1\nHost: hub\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe\nContent-Type: application/json\n\n{\n  \ntimestamp\n: \n2018-01-08T01:40:05.14\n,\n  \nid\n: \nwYXStHqxFQyHFELh\n,\n  \nevent\n: {\n    \nhub.topic\n: \nhttps://hub.example.com/7jaa86kgdudewiaq0wtu\n,\n    \nhub.event\n: \nclose-patient-chart\n,\n    \ncontext\n: [\n      {\n        \nkey\n: \npatient\n,\n        \nresource\n: {\n          \nresourceType\n: \nPatient\n,\n          \nid\n: \n798E4MyMcpCWHab9\n,\n          \nidentifier\n: [\n             {\n               \ntype\n: {\n                    \ncoding\n: [\n                        {\n                            \nsystem\n: \nhttp://terminology.hl7.org/CodeSystem/v2-0203\n,\n                            \nvalue\n: \nMR\n,\n                            \ndisplay\n: \nMedication Record Number\n\n                         }\n                        \ntext\n: \nMRN\n\n                      ]\n                  }\n              }\n          ]\n        }\n      }\n    ]\n  }\n}\n\n\n\n\nEvent Notification Errors\n\n\nIf the subscriber cannot follow the context of the event, for instance due to an error or a deliberate choice to not follow a context, the subscriber MAY respond with a 'sync-error' event. The Hub MAY use these events to track synchronization state and MAY also forward these events to other subscribers of the same topic.\n\n\nEvent Notification Error Example\n\n\nPOST https://hub.example.com/7jaa86kgdudewiaq0wtu HTTP/1.1\nHost: hub\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe\nContent-Type: application/json\n\n{\n  \ntimestamp\n: \n2018-01-08T01:37:05.14\n,\n  \nid\n: \nq9v3jubddqt63n1\n,\n  \nevent\n: {\n    \nhub.topic\n: \nhttps://hub.example.com/7jaa86kgdudewiaq0wtu\n,\n    \nhub.event\n: \nsync-error\n,\n    \ncontext\n: [\n      {\n        \nkey\n: \noperationoutcome\n,\n        \nresource\n: {\n          \nresourceType\n: \nOperationOutcome\n,\n          \nissue\n: [\n            {\n              \nseverity\n: \nwarning\n,\n              \ncode\n: \nprocessing\n,\n              \ndiagnostics\n: \nAppId3456 failed to follow context\n\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\n\n\n\n\nEvent Catalog\n\n\nEach event definition in the catalog, below, specifies a single event name, a description of the event, and the  required or optional contextual information associated with the event. Alongside the event name, the contextual information is used by the subscriber.\n\n\nFHIR is the interoperable data model used by FHIRcast. The fields within \ncontext\n are subsets of FHIR resources. Hubs MUST send the results of FHIR reads in the context, as specified below. For example, when the \nopen-image-study\n event occurs, the notification sent to a subscriber MUST include the ImagingStudy FHIR resource. Hubs SHOULD send the results of an ImagingStudy FHIR read using the \n_elements\n query parameter, like so:  \nImagingStudy/{id}?_elements=identifier,accession\n and in accordance with the \nFHIR specification\n. \n\n\nA FHIR server may not support the \n_elements\n query parameter; a subscriber MUST gracefully handle receiving a full FHIR resource in the context of a notification.\n\n\nThe name of the event SHOULD succinctly and clearly describe the activity or event. Event names are unique so event creators SHOULD take care to ensure newly proposed events do not conflict with an existing event name. Event creators SHALL name their event with reverse domain notation (e.g. \norg.example.patient-transmogrify\n) if the event is specific to an organization. Reverse domain notation SHALL not be used by a standard event catalog.\n\n\nopen-patient-chart\n\n\nDescription:\n\n\nUser opened patient's medical record. \n\n\nExample:\n\n\n{\n  \ncontext\n: [\n    {\n      \nkey\n: \npatient\n,\n      \nresource\n: {\n        \nresourceType\n: \nPatient\n,\n        \nid\n: \newUbXT9RWEbSj5wPEdgRaBw3\n,\n        \nidentifier\n: [\n           {\n             \ntype\n: {\n                  \ncoding\n: [\n                      {\n                          \nsystem\n: \nhttp://terminology.hl7.org/CodeSystem/v2-0203\n,\n                          \nvalue\n: \nMR\n,\n                          \ndisplay\n: \nMedication Record Number\n\n                       }\n                      \ntext\n: \nMRN\n\n                    ]\n                }\n            }\n        ]\n      }\n    }\n  ]\n}\n\n\n\n\n\n\n\n\n\n\nContext\n\n\nOptionality\n\n\nFHIR operation to generate context\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npatient\n\n\nRequired\n\n\nPatient/{id}?_elements=identifier\n\n\nFHIR Patient resource describing the patient whose chart is currently in context.\n\n\n\n\n\n\nencounter\n\n\nOptional\n\n\nEncounter/{id}?_elements=identifier\n\n\nFHIR Encounter resource in context in the newly opened patient's chart.\n\n\n\n\n\n\n\n\nswitch-patient-chart\n\n\nDescription:\n\n\nUser changed from one open patient's medical record to another previously opened patient's medical record. The context documents the patient whose record is currently open.\n\n\nExample:\n\n\n{\n  \ncontext\n: [\n    {\n      \nkey\n: \npatient\n,\n      \nresource\n: {\n        \nresourceType\n: \nPatient\n,\n        \nid\n: \newUbXT9RWEbSj5wPEdgRaBw3\n,\n        \nidentifier\n: [\n           {\n             \ntype\n: {\n                  \ncoding\n: [\n                      {\n                          \nsystem\n: \nhttp://terminology.hl7.org/CodeSystem/v2-0203\n,\n                          \nvalue\n: \nMR\n,\n                          \ndisplay\n: \nMedication Record Number\n\n                       }\n                      \ntext\n: \nMRN\n\n                    ]\n                }\n            }\n        ]\n      }\n    }\n  ]\n}\n\n\n\n\n\n\n\n\n\n\nContext\n\n\nOptionality\n\n\nFHIR operation to generate context\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npatient\n\n\nRequired\n\n\nPatient/{id}?_elements=identifier\n\n\nFHIR Patient resource describing the patient whose chart is currently in context..\n\n\n\n\n\n\nencounter\n\n\nOptional\n\n\nEncounter/{id}?_elements=identifier\n\n\nFHIR Encounter resource in context in the newly opened patient's chart.\n\n\n\n\n\n\n\n\nclose-patient-chart\n\n\nDescription: User closed patient's medical record.\n\n\nExample:\n\n\n{\n  \ncontext\n: [\n    {\n      \nkey\n: \npatient\n,\n      \nresource\n: {\n        \nresourceType\n: \nPatient\n,\n        \nid\n: \newUbXT9RWEbSj5wPEdgRaBw3\n,\n        \nidentifier\n: [\n           {\n             \ntype\n: {\n                  \ncoding\n: [\n                      {\n                          \nsystem\n: \nhttp://terminology.hl7.org/CodeSystem/v2-0203\n,\n                          \nvalue\n: \nMR\n,\n                          \ndisplay\n: \nMedication Record Number\n\n                       }\n                      \ntext\n: \nMRN\n\n                    ]\n                }\n            }\n        ]\n      }\n    }\n  ]\n}\n\n\n\n\n\n\n\n\n\n\nContext\n\n\nOptionality\n\n\nFHIR operation to generate context\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npatient\n\n\nRequired\n\n\nPatient/{id}?_elements=identifier\n\n\nFHIR Patient resource describing the patient whose chart is currently in context..\n\n\n\n\n\n\nencounter\n\n\nOptional\n\n\nEncounter/{id}?_elements=identifier\n\n\nFHIR Encounter resource in context in the newly opened patient's chart.\n\n\n\n\n\n\n\n\nopen-imaging-study\n\n\nDescription: User opened record of imaging study.\n\n\nExample:\n\n\n{\n  \ncontext\n: [\n    {\n      \nkey\n: \npatient\n,\n      \nresource\n: {\n        \nresourceType\n: \nPatient\n,\n        \nid\n: \newUbXT9RWEbSj5wPEdgRaBw3\n,\n        \nidentifier\n: [\n          {\n            \nsystem\n: \nurn:oid:1.2.840.114350\n,\n            \nvalue\n: \n185444\n\n          },\n          {\n            \nsystem\n: \nurn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000\n,\n            \nvalue\n: \n2667\n\n          }\n        ]\n      }\n    },\n    {\n      \nkey\n: \nstudy\n,\n      \nresource\n: {\n        \nresourceType\n: \nImagingStudy\n,\n        \nid\n: \n8i7tbu6fby5ftfbku6fniuf\n,\n        \nuid\n: \nurn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045\n,\n        \nidentifier\n: [\n          {\n            \nsystem\n: \n7678\n,\n            \nvalue\n: \n185444\n\n          }\n        ],\n        \npatient\n: {\n          \nreference\n: \nPatient/ewUbXT9RWEbSj5wPEdgRaBw3\n\n        }\n      }\n    }\n  ]\n}\n\n\n\n\n\n\n\n\n\n\nContext\n\n\nOptionality\n\n\nFHIR operation to generate context\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npatient\n\n\nOptional\n\n\nPatient/{id}?_elements=identifier\n\n\nFHIR Patient resource describing the patient whose chart is currently in context.\n\n\n\n\n\n\nstudy\n\n\nRequired\n\n\nImagingStudy/{id}?_elements=identifier,accession\n\n\nFHIR ImagingStudy resource in context. Note that in addition to the request identifier and accession elements, the DICOM uid and FHIR patient reference are included because they're required by the FHIR specification.\n\n\n\n\n\n\n\n\nswitch-imaging-study\n\n\nDescription: User changed from one open imaging study to another previously opened imaging study. The context documents the study, and optionally patient, for the currently open record.\n\n\nExample:\n\n\n{\n  \ncontext\n: [\n    {\n      \nkey\n: \npatient\n,\n      \nresource\n: {\n        \nresourceType\n: \nPatient\n,\n        \nid\n: \newUbXT9RWEbSj5wPEdgRaBw3\n,\n        \nidentifier\n: [\n          {\n            \nsystem\n: \nurn:oid:1.2.840.114350\n,\n            \nvalue\n: \n185444\n\n          },\n          {\n            \nsystem\n: \nurn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000\n,\n            \nvalue\n: \n2667\n\n          }\n        ]\n      }\n    },\n    {\n      \nkey\n: \nstudy\n,\n      \nresource\n: {\n        \nresourceType\n: \nImagingStudy\n,\n        \nid\n: \n8i7tbu6fby5ftfbku6fniuf\n,\n        \nuid\n: \nurn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045\n,\n        \nidentifier\n: [\n          {\n            \nsystem\n: \n7678\n,\n            \nvalue\n: \n185444\n\n          }\n        ],\n        \npatient\n: {\n          \nreference\n: \nPatient/ewUbXT9RWEbSj5wPEdgRaBw3\n\n        }\n      }\n    }\n  ]\n}\n\n\n\n\n\n\n\n\n\n\nContext\n\n\nOptionality\n\n\nFHIR operation to generate context\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npatient\n\n\nOptional\n\n\nPatient/{id}?_elements=identifier\n\n\nFHIR Patient resource describing the patient whose chart is currently in context.\n\n\n\n\n\n\nstudy\n\n\nRequired\n\n\nImagingStudy/{id}?_elements=identifier,accession\n\n\nFHIR ImagingStudy resource in context. Note that in addition to the request identifier and accession elements, the DICOM uid and FHIR patient reference are included because they're required by the FHIR specification.\n\n\n\n\n\n\n\n\nclose-imaging-study\n\n\nDescription: User closed imaging study.\n\n\nExample:\n\n\n{\n  \ncontext\n: [\n    {\n      \nkey\n: \npatient\n,\n      \nresource\n: {\n        \nresourceType\n: \nPatient\n,\n        \nid\n: \newUbXT9RWEbSj5wPEdgRaBw3\n,\n        \nidentifier\n: [\n          {\n            \nsystem\n: \nurn:oid:1.2.840.114350\n,\n            \nvalue\n: \n185444\n\n          },\n          {\n            \nsystem\n: \nurn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000\n,\n            \nvalue\n: \n2667\n\n          }\n        ]\n      }\n    },\n    {\n      \nkey\n: \nstudy\n,\n      \nresource\n: {\n        \nresourceType\n: \nImagingStudy\n,\n        \nid\n: \n8i7tbu6fby5ftfbku6fniuf\n,\n        \nuid\n: \nurn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045\n,\n        \nidentifier\n: [\n          {\n            \nsystem\n: \n7678\n,\n            \nvalue\n: \n185444\n\n          }\n        ],\n        \npatient\n: {\n          \nreference\n: \nPatient/ewUbXT9RWEbSj5wPEdgRaBw3\n\n        }\n      }\n    }\n  ]\n}\n\n\n\n\n\n\n\n\n\n\nContext\n\n\nOptionality\n\n\nFHIR operation to generate context\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npatient\n\n\nOptional\n\n\nPatient/{id}?_elements=identifier\n\n\nFHIR Patient resource describing the patient whose chart is currently in context.\n\n\n\n\n\n\nstudy\n\n\nRequired\n\n\nImagingStudy/{id}?_elements=identifier,accession\n\n\nFHIR ImagingStudy resource in context. Note that in addition to the request identifier and accession elements, the DICOM uid and FHIR patient reference are included because they're required by the FHIR specification.\n\n\n\n\n\n\n\n\nuser-logout\n\n\nDescription: User gracefully exited the application.\n\n\nExample:\n\n\n{\n}\n\n\nNo Context \n\n\nuser-hibernate\n\n\nDescription: User temporarily suspended her session. The user's session will eventually resume.\n\n\nExample:\n\n\n{\n}\n\n\nNo Context\n\n\nsync-error\n\n\nDescription: A syncronization error has been detected. Inform subscribed clients.\n\n\nExample:\n\n\n{\n  \ncontext\n: [\n    {\n      \nkey\n: \noperationoutcome\n,\n      \nresource\n: {\n        \nresourceType\n: \nOperationOutcome\n,\n        \nissue\n: [\n          {\n            \nseverity\n: \nwarning\n,\n            \ncode\n: \nprocessing\n,\n            \ndiagnostics\n: \nAppId3456 failed to follow context\n\n          }\n        ]\n      }\n    }\n  ]\n}\n\n\n\n\n\n\n\n\n\n\nContext\n\n\nOptionality\n\n\nFHIR operation to generate context\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noperationoutcome\n\n\nOptional\n\n\nOperationOutcome\n\n\nFHIR resource describing an outcome of an unsuccessful system action..", 
            "title": "archived (May2019Ballot)"
        }, 
        {
            "location": "/specification/May2019Ballot/#fhircast", 
            "text": "\"1.0 Draft\" This is the draft of the 1.0 release of the FHIRcast specification. We are currently working towards a 1.0 release and would love your feedback and proposed changes. Look at our  current issue list  and get involved!", 
            "title": "FHIRcast"
        }, 
        {
            "location": "/specification/May2019Ballot/#overview", 
            "text": "The FHIRcast specification describes the APIs and interactions to synchronize healthcare applications in real time to show the same clinical content to a user. All data exchanged through the HTTP APIs MUST be sent and received as  JSON  structures, and MUST be transmitted over channels secured using the Hypertext Transfer Protocol (HTTP) over Transport Layer Security (TLS), also known as HTTPS and defined in  RFC2818 . FHIRcast is modeled on the webhook design pattern and specifically the  W3C WebSub RFC  and builds on the  HL7 SMART on FHIR launch protocol .   An app subscribes to specific workflow events for a given session, the subscription is verified and the app is notified when those workflow events occur; for example, by the clinician opening a patient's chart. The subscring app may query a session's current context and initiate context changes by accessing APIs exposed by the Hub. The app deletes its subscription when it no longer wants to receive notifications. In all cases the app authenticates to the Hub with an OAuth 2.0 bearer token.", 
            "title": "Overview"
        }, 
        {
            "location": "/specification/May2019Ballot/#session-discovery", 
            "text": "Before establishing a subscription, an app must know the  hub.topic  which is an unique url identifying the session, and the  cast-hub  which is the base url of the Hub. The app discovers these two urls as part of a SMART on FHIR launch.   The app MUST either be launched from the driving application following the  SMART on FHIR EHR launch  flow or the app may initiate the launch following the  SMART on FHIR standalone launch . In either case, the app MUST request and be granted the  fhircast  OAuth2.0 scope. Accompanying this scope grant, the authorization server MUST supply the  cast-hub  and  hub.topic  SMART launch parameters alongside the access token. These parameters identify the Hub's base url, and a unique, opaque identifier of the current user's session, respectivly. Per SMART, when scopes of  openid  and  fhirUser  are granted, the app will additionally receive the current user's identity in an  id_token .", 
            "title": "Session Discovery"
        }, 
        {
            "location": "/specification/May2019Ballot/#smart-launch-example", 
            "text": "Note that the SMART launch parameters include the Hub's base url and and the session identifier in the  cast-hub  and  hub.topic  fields.  {\n   access_token :  i8hweunweunweofiwweoijewiwe ,\n   token_type :  bearer ,\n   expires_in : 3600,\n   patient :   123 ,\n   encounter :  456 ,\n   imagingstudy :  789 ,\n   cast-hub  :  https://hub.example.com ,\n   hub.topic :  https://hub.example.com/7jaa86kgdudewiaq0wtu ,\n}  Although FHIRcast works best with the SMART on FHIR launch and authorization process, implementation-specific launch, authentication, and authorization  protocols may be possible. See  other launch scenarios  for guidance.", 
            "title": "SMART Launch Example"
        }, 
        {
            "location": "/specification/May2019Ballot/#subscribing-and-unsubscribing", 
            "text": "Subscribing consists of two exchanges:   Subscriber requests a subscription at the  cast-hub  url.  Hub confirms the subscription was actually requested by the subscriber by contacting the  hub.callback  url.    Unsubscribing works in the same way, except with a single parameter changed to indicate the desire to unsubscribe.", 
            "title": "Subscribing and Unsubscribing"
        }, 
        {
            "location": "/specification/May2019Ballot/#subscription-request", 
            "text": "To create a subscription, the subscribing app performs an HTTP POST ( RFC7231 ) to the Hub's base url (as specified in  cast-hub ) with the following parameters, authenticating with the Bearer access token.  This request MUST have a Content-Type header of  application/x-www-form-urlencoded   and MUST use the following parameters in its body, formatted accordingly:", 
            "title": "Subscription Request"
        }, 
        {
            "location": "/specification/May2019Ballot/#subscription-request-parameters", 
            "text": "Field  Optionality  Type  Description      hub.callback  Required  string  The Subscriber's callback URL where notifications should be delivered. The callback URL SHOULD be an unguessable URL that is unique per subscription.    hub.mode  Required  string  The literal string \"subscribe\" or \"unsubscribe\", depending on the goal of the request.    hub.topic  Required  string  The uri of the user's session that the subscriber wishes to subscribe to or unsubscribe from.    hub.secret  Required  string  A subscriber-provided cryptographically random unique secret string that will be used to compute an HMAC digest delivered in each notification. This parameter MUST be less than 200 bytes in length.    hub.events  Required  string  Comma-separated list of event types from the Event Catalog for which the Subscriber wants notifications.    hub.lease_seconds  Optional  number  Number of seconds for which the subscriber would like to have the subscription active, given as a positive decimal integer. Hubs MAY choose to respect this value or not, depending on their own policies, and MAY set a default value if the subscriber omits the parameter.     Hubs MUST allow subscribers to re-request subscriptions that are already activated. Each subsequent request to a hub to subscribe or unsubscribe MUST override the previous subscription state for a specific topic, and callback URL combination once the action is verified.   The callback URL MAY contain arbitrary query string parameters (e.g., ?foo=bar red=fish). Hubs MUST preserve the query string during subscription verification by appending new parameters to the end of the list using the   (ampersand) character to join. When sending the content distribution request, the hub will make a POST request to the callback URL including any query string parameters in the URL portion of the request, not as POST body parameters.  Within FHIRcast, the client that creates a subscription and the server that hosts the callback url are the same entity. If these roles are split, the Hub assumes that the same authorization and access rights apply to both systems.", 
            "title": "Subscription Request Parameters"
        }, 
        {
            "location": "/specification/May2019Ballot/#subscription-request-example", 
            "text": "In this example, the app asks to be notified of the  open-patient-chart  and  close-patient-chart  events.  POST https://hub.example.com\nHost: hub.example.com\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe\nContent-Type: application/x-www-form-urlencoded\n\nhub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a hub.mode=subscribe hub.topic=https%3A%2F%2Fhub.example.com%2F7jaa86kgdudewiaq0wtu hub.secret=shhh-this-is-a-secret hub.events=patient-open-chart,patient-close-chart", 
            "title": "Subscription Request Example"
        }, 
        {
            "location": "/specification/May2019Ballot/#subscription-response", 
            "text": "If the Hub URL supports FHIRcast and is able to handle the subscription or unsubscription request, the Hub MUST respond to a subscription request with an HTTP 202 \"Accepted\" response to indicate that the request was received and will now be verified by the Hub. The Hub SHOULD perform the verification of intent as soon as possible.  If a Hub finds any errors in the subscription request, an appropriate HTTP error response code (4xx or 5xx) MUST be returned. In the event of an error, the Hub SHOULD return a description of the error in the response body as plain text, used to assist the client developer in understanding the error. This is not meant to be shown to the end user. Hubs MAY decide to reject some callback URLs or topic URIs based on their own policies.", 
            "title": "Subscription Response"
        }, 
        {
            "location": "/specification/May2019Ballot/#subscription-response-example", 
            "text": "HTTP/1.1 202 Accepted", 
            "title": "Subscription Response Example"
        }, 
        {
            "location": "/specification/May2019Ballot/#subscription-denial", 
            "text": "If (and when) the subscription is denied, the Hub MUST inform the subscriber by sending an HTTP GET request to the subscriber's callback URL as given in the subscription request. This request has the following query string arguments appended.", 
            "title": "Subscription Denial"
        }, 
        {
            "location": "/specification/May2019Ballot/#subscription-denial-parameters", 
            "text": "Field  Optionality  Type  Description      hub.mode  Required  string  The literal string \"denied\".    hub.topic  Required  string  The topic uri given in the corresponding subscription request.    hub.events  Required  string  A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request.    hub.reason  Optional  string  The Hub may include a reason for which the subscription has been denied. The subscription MAY be denied by the Hub at any point (even if it was previously accepted). The Subscriber SHOULD then consider that the subscription is not possible anymore.", 
            "title": "Subscription Denial Parameters"
        }, 
        {
            "location": "/specification/May2019Ballot/#subscription-denial-example", 
            "text": "GET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=denied hub.topic=https%3A%2F%2Fhub.example.com%2F7jaa86kgdudewiaq0wtu hub.events=open-patient-chart,close-patient-chart hub.challenge=meu3we944ix80ox hub.reason=session+unexpectedly+stopped HTTP 1.1\nHost: subscriber", 
            "title": "Subscription Denial Example"
        }, 
        {
            "location": "/specification/May2019Ballot/#intent-verification", 
            "text": "If (and when) the subscription is accepted, the Hub MUST perform the verification of intent of the subscriber. The  hub.callback  url verification process ensures that the subscriber actually controls the callback url.", 
            "title": "Intent Verification"
        }, 
        {
            "location": "/specification/May2019Ballot/#intent-verification-request", 
            "text": "In order to prevent an attacker from creating unwanted subscriptions on behalf of a subscriber (or unsubscribing desired ones), a Hub must ensure that the subscriber did indeed send the subscription request. The Hub verifies a subscription request by sending an HTTPS GET ( RFC2818 ) request to the subscriber's callback URL as given in the subscription request. This request has the following query string arguments appended:", 
            "title": "Intent Verification Request"
        }, 
        {
            "location": "/specification/May2019Ballot/#verification-parameters", 
            "text": "Field  Optionality  Type  Description      hub.mode  Required  string  The literal string \"subscribe\" or \"unsubscribe\", which matches the original request to the hub from the subscriber.    hub.topic  Required  string  The topic session uri given in the corresponding subscription request.    hub.events  Required  string  A comma-separated list of events from the Event Catalog corresponding to the events string given in the corresponding subscription request.    hub.challenge  Required  string  A Hub-generated, random string that MUST be echoed by the subscriber to verify the subscription.    hub.lease_seconds  Required  number  The Hub-determined number of seconds that the subscription will stay active before expiring, measured from the time the verification request was made from the Hub to the subscriber. Subscribers must renew their subscription before the lease seconds period is over to avoid interruption.", 
            "title": "Verification Parameters"
        }, 
        {
            "location": "/specification/May2019Ballot/#intent-verification-request-example", 
            "text": "GET https://app.example.com/session/callback/v7tfwuk17a?hub.mode=subscribe hub.topic=7jaa86kgdudewiaq0wtu hub.events=open-patient-chart,close-patient-chart hub.challenge=meu3we944ix80ox HTTP 1.1\nHost: subscriber", 
            "title": "Intent Verification Request Example"
        }, 
        {
            "location": "/specification/May2019Ballot/#intent-verification-response", 
            "text": "The subscriber MUST confirm that the  hub.topic  corresponds to a pending subscription or unsubscription that it wishes to carry out. If so, the subscriber MUST respond with an HTTP success (2xx) code with a response body equal to the  hub.challenge  parameter. If the subscriber does not agree with the action, the subscriber MUST respond with a 404 \"Not Found\" response.  The Hub MUST consider other server response codes (3xx, 4xx, 5xx) to mean that the verification request has failed. If the subscriber returns an HTTP success (2xx) but the content body does not match the  hub.challenge  parameter, the Hub MUST also consider verification to have failed.", 
            "title": "Intent Verification Response"
        }, 
        {
            "location": "/specification/May2019Ballot/#intent-verification-response-example", 
            "text": "HTTP/1.1 200 Success\nContent-Type: text/html\n\nmeu3we944ix80ox", 
            "title": "Intent Verification Response Example"
        }, 
        {
            "location": "/specification/May2019Ballot/#unsubscribe", 
            "text": "Once a subscribing app no longer wants to receive event notifications, it MUST unsubscribe from the session. The unsubscribe request message mirrors the subscribe request message with only a single difference: the  hub.mode  MUST be equal to the string  unsubscribe .", 
            "title": "Unsubscribe"
        }, 
        {
            "location": "/specification/May2019Ballot/#unsubscribe-request-example", 
            "text": "POST https://hub.example.com\nHost: hub\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe\nContent-Type: application/x-www-form-urlencoded\n\nhub.callback=https%3A%2F%2Fapp.example.com%2Fsession%2Fcallback%2Fv7tfwuk17a hub.mode=unsubscribe hub.topic=https%3A%2F%2Fhub.example.com%2F7jaa86kgdudewiaq0wtu hub.secret=shhh-this-is-a-secret hub.events=open-patient-chart,close-patient-chart", 
            "title": "Unsubscribe Request Example"
        }, 
        {
            "location": "/specification/May2019Ballot/#event-notification", 
            "text": "The Hub MUST notify subscribed apps of workflow events to which the app is subscribed, as the event occurs. The notification is an HTTPS POST containing a JSON object in the request body.", 
            "title": "Event Notification"
        }, 
        {
            "location": "/specification/May2019Ballot/#event-notification-request", 
            "text": "Using the hub.secret from the subscription request, the hub MUST generate an HMAC signature of the payload and include that signature in the request headers of the notification. The  X-Hub-Signature  header's value MUST be in the form  method=signature  where method is one of the recognized algorithm names and signature is the hexadecimal representation of the signature. The signature MUST be computed using the HMAC algorithm ( RFC6151 ) with the request body as the data and the  hub.secret  as the key.  In addition to a description of the subscribed event that just occurred, the notification to the subscriber MUST include an  ISO 8601-2  formatted timestamp in UTC and an event identifer that is universally unique for the Hub. See the  notification parameters table  for details. The timestamp should be used by subscribers to establish message affinity through the use of a message queue. The event identifier should be used to differentiate retried messages from user actions.", 
            "title": "Event Notification Request"
        }, 
        {
            "location": "/specification/May2019Ballot/#event-notification-request-details", 
            "text": "The notification's  hub.event  and  context  fields inform the subscriber of the current state of the user's session. The  hub.event  is a user workflow event, from the Event Catalog. The  context  is an array of named FHIR objects (similar to  CDS Hooks's context  field) that describe the current content of the user's session. Each event in the  Event Catalog  defines what context is expected in the notification. Hubs MAY use the  FHIR _elements parameter  to limit the size of the data being passed while also including additional, local identifiers that are likely already in use in production implementations. Subscribers MUST accept a full FHIR resource or the  _elements -limited resource as defined in the Event Catalog.", 
            "title": "Event Notification Request Details"
        }, 
        {
            "location": "/specification/May2019Ballot/#notification-parameters", 
            "text": "Field  Optionality  Type  Description      timestamp  Required  string  ISO 8601-2 timestamp in UTC describing the time at which the event occurred with subsecond accuracy.    id  Required  string  Event identifier used to recognize retried notifications. This id MUST be globally unique for the Hub, SHOULD be opaque to the subscriber and MAY be a GUID.    event  Required  object  A json object describing the event. See  below .", 
            "title": "Notification Parameters"
        }, 
        {
            "location": "/specification/May2019Ballot/#event-object-parameters", 
            "text": "Field  Optionality  Type  Description      hub.topic  Required  string  The topic session uri given in the subscription request.    hub.event  Required  string  The event that triggered this notification, taken from the list of events from the subscription request.    context  Required  array  An array of named FHIR objects corresponding to the user's context after the given event has occurred. Common FHIR resources are: Patient, Encounter, ImagingStudy and List. The Hub MUST only return FHIR resources that are authorized to be accessed with the existing OAuth2 access_token.", 
            "title": "Event Object Parameters"
        }, 
        {
            "location": "/specification/May2019Ballot/#event-notification-request-example", 
            "text": "POST https://app.example.com/session/callback/v7tfwuk17a HTTP/1.1\nHost: subscriber\nX-Hub-Signature: sha256=dce85dc8dfde2426079063ad413268ac72dcf845f9f923193285e693be6ff3ae\n\n{\n   timestamp :  2018-01-08T01:37:05.14 ,\n   id :  q9v3jubddqt63n1 ,\n   event : {\n     hub.topic :  https://hub.example.com/7jaa86kgdudewiaq0wtu ,\n     hub.event :  open-patient-chart ,\n     context : [\n      {\n         key :  patient ,\n         resource : {\n           resourceType :  Patient ,\n           id :  ewUbXT9RWEbSj5wPEdgRaBw3 ,\n           identifier : [\n             {\n                type : {\n                     coding : [\n                        {\n                             system :  http://terminology.hl7.org/CodeSystem/v2-0203 ,\n                             value :  MR ,\n                             display :  Medication Record Number \n                         }\n                         text :  MRN \n                      ]\n                  }\n              }\n          ]\n        }\n      }\n    ]\n  }\n}", 
            "title": "Event Notification Request Example"
        }, 
        {
            "location": "/specification/May2019Ballot/#event-notification-response", 
            "text": "The subscriber MUST respond to the notification with an appropriate HTTP status code. In the case of a successful notification, the subscriber MUST respond with an HTTP 200; otherwise, the subscriber MUST respond with an HTTP error status code. The Hub MAY use these statuses to track synchronization state.", 
            "title": "Event Notification Response"
        }, 
        {
            "location": "/specification/May2019Ballot/#event-notification-response-example", 
            "text": "HTTP/1.1 200 Accepted", 
            "title": "Event Notification Response Example"
        }, 
        {
            "location": "/specification/May2019Ballot/#query-for-current-context", 
            "text": "In addition to receiving notification of events as they occur, a subscribing app may request the current context of a given session. The client queries the Hub's  hub.topic  url to receive the current context for the session. Event-driven context notifications should take precedence. Note that no  hub.event  is present in the response.", 
            "title": "Query for Current Context"
        }, 
        {
            "location": "/specification/May2019Ballot/#query-for-current-context-example", 
            "text": "GET https://hub.example.com/7jaa86kgdudewiaq0wtu \nHost: hub\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe  {\n    timestamp : 2018-01-08T01:40:05.14 ,\n    id : wYXStHqxFQyHFELh ,\n    event :{\n       hub.topic : https://hub.example.com/7jaa86kgdudewiaq0wtu ,\n       context :[\n         {\n             key : patient ,\n             resource :{\n                resourceType : Patient ,\n                id : 798E4MyMcpCWHab9 ,\n                identifier : [\n                 {\n                    type : {\n                         coding : [\n                            {\n                                 system :  http://terminology.hl7.org/CodeSystem/v2-0203 ,\n                                 value :  MR ,\n                                 display :  Medication Record Number \n                             }\n                             text :  MRN \n                          ]\n                      }\n                  }\n              ]\n            }\n         },\n         {\n             key : encounter ,\n             resource :{\n                resourceType : Encounter ,\n                id : ecgXt3jVqNNpsXnNXZ3KljA3 ,\n                identifier :[\n                  {\n                      use : usual ,\n                      system : http://healthcare.example.org/identifiers/encounter ,\n                      value : 1853 \n                  }\n               ]\n            }\n         },\n         {\n             key : study ,\n             resource :{\n                resourceType : ImagingStudy ,\n                id : 8i7tbu6fby5ftfbku6fniuf ,\n                uid : urn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045 ,\n                accession :{\n                   use : usual ,\n                   type :{\n                      coding :[\n                        {\n                            system : http://hl7.org/fhir/v2/0203 ,\n                            code : ACSN \n                        }\n                     ]\n                  }\n               },\n                identifier :[\n                  {\n                      system : 7678 ,\n                      value : 185444 \n                  }\n               ]\n            }\n         }\n      ]\n   }\n}", 
            "title": "Query for Current Context Example"
        }, 
        {
            "location": "/specification/May2019Ballot/#request-context-change", 
            "text": "Similar to the Hub's notifications to the subscriber, the subscriber MAY request context changes with an HTTP POST to the  hub.topic  url. The Hub MUST either accept this context change by responding with any successful HTTP status or reject it by responding with any 4xx or 5xx HTTP status. The subscriber MUST be capable of gracefully handling a rejected context request.   Once a requested context change is accepted, the Hub MUST broadcast the context notification to all subscribers, including the original requestor.", 
            "title": "Request Context Change"
        }, 
        {
            "location": "/specification/May2019Ballot/#request-context-change-request", 
            "text": "POST https://hub.example.com/7jaa86kgdudewiaq0wtu HTTP/1.1\nHost: hub\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe\nContent-Type: application/json\n\n{\n   timestamp :  2018-01-08T01:40:05.14 ,\n   id :  wYXStHqxFQyHFELh ,\n   event : {\n     hub.topic :  https://hub.example.com/7jaa86kgdudewiaq0wtu ,\n     hub.event :  close-patient-chart ,\n     context : [\n      {\n         key :  patient ,\n         resource : {\n           resourceType :  Patient ,\n           id :  798E4MyMcpCWHab9 ,\n           identifier : [\n             {\n                type : {\n                     coding : [\n                        {\n                             system :  http://terminology.hl7.org/CodeSystem/v2-0203 ,\n                             value :  MR ,\n                             display :  Medication Record Number \n                         }\n                         text :  MRN \n                      ]\n                  }\n              }\n          ]\n        }\n      }\n    ]\n  }\n}", 
            "title": "Request Context Change Request"
        }, 
        {
            "location": "/specification/May2019Ballot/#event-notification-errors", 
            "text": "If the subscriber cannot follow the context of the event, for instance due to an error or a deliberate choice to not follow a context, the subscriber MAY respond with a 'sync-error' event. The Hub MAY use these events to track synchronization state and MAY also forward these events to other subscribers of the same topic.", 
            "title": "Event Notification Errors"
        }, 
        {
            "location": "/specification/May2019Ballot/#event-notification-error-example", 
            "text": "POST https://hub.example.com/7jaa86kgdudewiaq0wtu HTTP/1.1\nHost: hub\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe\nContent-Type: application/json\n\n{\n   timestamp :  2018-01-08T01:37:05.14 ,\n   id :  q9v3jubddqt63n1 ,\n   event : {\n     hub.topic :  https://hub.example.com/7jaa86kgdudewiaq0wtu ,\n     hub.event :  sync-error ,\n     context : [\n      {\n         key :  operationoutcome ,\n         resource : {\n           resourceType :  OperationOutcome ,\n           issue : [\n            {\n               severity :  warning ,\n               code :  processing ,\n               diagnostics :  AppId3456 failed to follow context \n            }\n          ]\n        }\n      }\n    ]\n  }\n}", 
            "title": "Event Notification Error Example"
        }, 
        {
            "location": "/specification/May2019Ballot/#event-catalog", 
            "text": "Each event definition in the catalog, below, specifies a single event name, a description of the event, and the  required or optional contextual information associated with the event. Alongside the event name, the contextual information is used by the subscriber.  FHIR is the interoperable data model used by FHIRcast. The fields within  context  are subsets of FHIR resources. Hubs MUST send the results of FHIR reads in the context, as specified below. For example, when the  open-image-study  event occurs, the notification sent to a subscriber MUST include the ImagingStudy FHIR resource. Hubs SHOULD send the results of an ImagingStudy FHIR read using the  _elements  query parameter, like so:   ImagingStudy/{id}?_elements=identifier,accession  and in accordance with the  FHIR specification .   A FHIR server may not support the  _elements  query parameter; a subscriber MUST gracefully handle receiving a full FHIR resource in the context of a notification.  The name of the event SHOULD succinctly and clearly describe the activity or event. Event names are unique so event creators SHOULD take care to ensure newly proposed events do not conflict with an existing event name. Event creators SHALL name their event with reverse domain notation (e.g.  org.example.patient-transmogrify ) if the event is specific to an organization. Reverse domain notation SHALL not be used by a standard event catalog.", 
            "title": "Event Catalog"
        }, 
        {
            "location": "/specification/May2019Ballot/#open-patient-chart", 
            "text": "", 
            "title": "open-patient-chart"
        }, 
        {
            "location": "/specification/May2019Ballot/#description", 
            "text": "User opened patient's medical record.", 
            "title": "Description:"
        }, 
        {
            "location": "/specification/May2019Ballot/#example", 
            "text": "{\n   context : [\n    {\n       key :  patient ,\n       resource : {\n         resourceType :  Patient ,\n         id :  ewUbXT9RWEbSj5wPEdgRaBw3 ,\n         identifier : [\n           {\n              type : {\n                   coding : [\n                      {\n                           system :  http://terminology.hl7.org/CodeSystem/v2-0203 ,\n                           value :  MR ,\n                           display :  Medication Record Number \n                       }\n                       text :  MRN \n                    ]\n                }\n            }\n        ]\n      }\n    }\n  ]\n}     Context  Optionality  FHIR operation to generate context  Description      patient  Required  Patient/{id}?_elements=identifier  FHIR Patient resource describing the patient whose chart is currently in context.    encounter  Optional  Encounter/{id}?_elements=identifier  FHIR Encounter resource in context in the newly opened patient's chart.", 
            "title": "Example:"
        }, 
        {
            "location": "/specification/May2019Ballot/#switch-patient-chart", 
            "text": "", 
            "title": "switch-patient-chart"
        }, 
        {
            "location": "/specification/May2019Ballot/#description_1", 
            "text": "User changed from one open patient's medical record to another previously opened patient's medical record. The context documents the patient whose record is currently open.", 
            "title": "Description:"
        }, 
        {
            "location": "/specification/May2019Ballot/#example_1", 
            "text": "{\n   context : [\n    {\n       key :  patient ,\n       resource : {\n         resourceType :  Patient ,\n         id :  ewUbXT9RWEbSj5wPEdgRaBw3 ,\n         identifier : [\n           {\n              type : {\n                   coding : [\n                      {\n                           system :  http://terminology.hl7.org/CodeSystem/v2-0203 ,\n                           value :  MR ,\n                           display :  Medication Record Number \n                       }\n                       text :  MRN \n                    ]\n                }\n            }\n        ]\n      }\n    }\n  ]\n}     Context  Optionality  FHIR operation to generate context  Description      patient  Required  Patient/{id}?_elements=identifier  FHIR Patient resource describing the patient whose chart is currently in context..    encounter  Optional  Encounter/{id}?_elements=identifier  FHIR Encounter resource in context in the newly opened patient's chart.", 
            "title": "Example:"
        }, 
        {
            "location": "/specification/May2019Ballot/#close-patient-chart", 
            "text": "", 
            "title": "close-patient-chart"
        }, 
        {
            "location": "/specification/May2019Ballot/#description-user-closed-patients-medical-record", 
            "text": "", 
            "title": "Description: User closed patient's medical record."
        }, 
        {
            "location": "/specification/May2019Ballot/#example_2", 
            "text": "{\n   context : [\n    {\n       key :  patient ,\n       resource : {\n         resourceType :  Patient ,\n         id :  ewUbXT9RWEbSj5wPEdgRaBw3 ,\n         identifier : [\n           {\n              type : {\n                   coding : [\n                      {\n                           system :  http://terminology.hl7.org/CodeSystem/v2-0203 ,\n                           value :  MR ,\n                           display :  Medication Record Number \n                       }\n                       text :  MRN \n                    ]\n                }\n            }\n        ]\n      }\n    }\n  ]\n}     Context  Optionality  FHIR operation to generate context  Description      patient  Required  Patient/{id}?_elements=identifier  FHIR Patient resource describing the patient whose chart is currently in context..    encounter  Optional  Encounter/{id}?_elements=identifier  FHIR Encounter resource in context in the newly opened patient's chart.", 
            "title": "Example:"
        }, 
        {
            "location": "/specification/May2019Ballot/#open-imaging-study", 
            "text": "", 
            "title": "open-imaging-study"
        }, 
        {
            "location": "/specification/May2019Ballot/#description-user-opened-record-of-imaging-study", 
            "text": "", 
            "title": "Description: User opened record of imaging study."
        }, 
        {
            "location": "/specification/May2019Ballot/#example_3", 
            "text": "{\n   context : [\n    {\n       key :  patient ,\n       resource : {\n         resourceType :  Patient ,\n         id :  ewUbXT9RWEbSj5wPEdgRaBw3 ,\n         identifier : [\n          {\n             system :  urn:oid:1.2.840.114350 ,\n             value :  185444 \n          },\n          {\n             system :  urn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000 ,\n             value :  2667 \n          }\n        ]\n      }\n    },\n    {\n       key :  study ,\n       resource : {\n         resourceType :  ImagingStudy ,\n         id :  8i7tbu6fby5ftfbku6fniuf ,\n         uid :  urn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045 ,\n         identifier : [\n          {\n             system :  7678 ,\n             value :  185444 \n          }\n        ],\n         patient : {\n           reference :  Patient/ewUbXT9RWEbSj5wPEdgRaBw3 \n        }\n      }\n    }\n  ]\n}     Context  Optionality  FHIR operation to generate context  Description      patient  Optional  Patient/{id}?_elements=identifier  FHIR Patient resource describing the patient whose chart is currently in context.    study  Required  ImagingStudy/{id}?_elements=identifier,accession  FHIR ImagingStudy resource in context. Note that in addition to the request identifier and accession elements, the DICOM uid and FHIR patient reference are included because they're required by the FHIR specification.", 
            "title": "Example:"
        }, 
        {
            "location": "/specification/May2019Ballot/#switch-imaging-study", 
            "text": "", 
            "title": "switch-imaging-study"
        }, 
        {
            "location": "/specification/May2019Ballot/#description-user-changed-from-one-open-imaging-study-to-another-previously-opened-imaging-study-the-context-documents-the-study-and-optionally-patient-for-the-currently-open-record", 
            "text": "", 
            "title": "Description: User changed from one open imaging study to another previously opened imaging study. The context documents the study, and optionally patient, for the currently open record."
        }, 
        {
            "location": "/specification/May2019Ballot/#example_4", 
            "text": "{\n   context : [\n    {\n       key :  patient ,\n       resource : {\n         resourceType :  Patient ,\n         id :  ewUbXT9RWEbSj5wPEdgRaBw3 ,\n         identifier : [\n          {\n             system :  urn:oid:1.2.840.114350 ,\n             value :  185444 \n          },\n          {\n             system :  urn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000 ,\n             value :  2667 \n          }\n        ]\n      }\n    },\n    {\n       key :  study ,\n       resource : {\n         resourceType :  ImagingStudy ,\n         id :  8i7tbu6fby5ftfbku6fniuf ,\n         uid :  urn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045 ,\n         identifier : [\n          {\n             system :  7678 ,\n             value :  185444 \n          }\n        ],\n         patient : {\n           reference :  Patient/ewUbXT9RWEbSj5wPEdgRaBw3 \n        }\n      }\n    }\n  ]\n}     Context  Optionality  FHIR operation to generate context  Description      patient  Optional  Patient/{id}?_elements=identifier  FHIR Patient resource describing the patient whose chart is currently in context.    study  Required  ImagingStudy/{id}?_elements=identifier,accession  FHIR ImagingStudy resource in context. Note that in addition to the request identifier and accession elements, the DICOM uid and FHIR patient reference are included because they're required by the FHIR specification.", 
            "title": "Example:"
        }, 
        {
            "location": "/specification/May2019Ballot/#close-imaging-study", 
            "text": "", 
            "title": "close-imaging-study"
        }, 
        {
            "location": "/specification/May2019Ballot/#description-user-closed-imaging-study", 
            "text": "", 
            "title": "Description: User closed imaging study."
        }, 
        {
            "location": "/specification/May2019Ballot/#example_5", 
            "text": "{\n   context : [\n    {\n       key :  patient ,\n       resource : {\n         resourceType :  Patient ,\n         id :  ewUbXT9RWEbSj5wPEdgRaBw3 ,\n         identifier : [\n          {\n             system :  urn:oid:1.2.840.114350 ,\n             value :  185444 \n          },\n          {\n             system :  urn:oid:1.2.840.114350.1.13.861.1.7.5.737384.27000 ,\n             value :  2667 \n          }\n        ]\n      }\n    },\n    {\n       key :  study ,\n       resource : {\n         resourceType :  ImagingStudy ,\n         id :  8i7tbu6fby5ftfbku6fniuf ,\n         uid :  urn:oid:2.16.124.113543.6003.1154777499.30246.19789.3503430045 ,\n         identifier : [\n          {\n             system :  7678 ,\n             value :  185444 \n          }\n        ],\n         patient : {\n           reference :  Patient/ewUbXT9RWEbSj5wPEdgRaBw3 \n        }\n      }\n    }\n  ]\n}     Context  Optionality  FHIR operation to generate context  Description      patient  Optional  Patient/{id}?_elements=identifier  FHIR Patient resource describing the patient whose chart is currently in context.    study  Required  ImagingStudy/{id}?_elements=identifier,accession  FHIR ImagingStudy resource in context. Note that in addition to the request identifier and accession elements, the DICOM uid and FHIR patient reference are included because they're required by the FHIR specification.", 
            "title": "Example:"
        }, 
        {
            "location": "/specification/May2019Ballot/#user-logout", 
            "text": "", 
            "title": "user-logout"
        }, 
        {
            "location": "/specification/May2019Ballot/#description-user-gracefully-exited-the-application", 
            "text": "", 
            "title": "Description: User gracefully exited the application."
        }, 
        {
            "location": "/specification/May2019Ballot/#example_6", 
            "text": "{\n}  No Context", 
            "title": "Example:"
        }, 
        {
            "location": "/specification/May2019Ballot/#user-hibernate", 
            "text": "", 
            "title": "user-hibernate"
        }, 
        {
            "location": "/specification/May2019Ballot/#description-user-temporarily-suspended-her-session-the-users-session-will-eventually-resume", 
            "text": "", 
            "title": "Description: User temporarily suspended her session. The user's session will eventually resume."
        }, 
        {
            "location": "/specification/May2019Ballot/#example_7", 
            "text": "{\n}  No Context", 
            "title": "Example:"
        }, 
        {
            "location": "/specification/May2019Ballot/#sync-error", 
            "text": "", 
            "title": "sync-error"
        }, 
        {
            "location": "/specification/May2019Ballot/#description-a-syncronization-error-has-been-detected-inform-subscribed-clients", 
            "text": "", 
            "title": "Description: A syncronization error has been detected. Inform subscribed clients."
        }, 
        {
            "location": "/specification/May2019Ballot/#example_8", 
            "text": "{\n   context : [\n    {\n       key :  operationoutcome ,\n       resource : {\n         resourceType :  OperationOutcome ,\n         issue : [\n          {\n             severity :  warning ,\n             code :  processing ,\n             diagnostics :  AppId3456 failed to follow context \n          }\n        ]\n      }\n    }\n  ]\n}     Context  Optionality  FHIR operation to generate context  Description      operationoutcome  Optional  OperationOutcome  FHIR resource describing an outcome of an unsuccessful system action..", 
            "title": "Example:"
        }, 
        {
            "location": "/launch-scenarios/", 
            "text": "App launch scenarios and session discovery\n\n\nA FHIRcast Hub uses a unique \nhub.topic\n url to identify a single session across the Hub, subscribing and driving applications which are engaged in the shared session. The \nhub.topic\n must be known by a system for it to participate in the session. Typically, the Hub defines the \nhub.topic\n.\n\n\nThe \nHL7 SMART on FHIR app launch specification\n enables the launched, synchronizing app to discover the \nhub.topic\n, because the SMART OAuth 2.0 server provides it during the OAuth 2.0 handshake as a SMART launch parameter. Use of SMART requires either that a synchronizing app supports the SMART on FHIR specification and specifically either be launched from the driving app or use the Hub's authorization server's login page. \n\n\nOnce the \nhub.topic\n and url to the hub is known by the synchronizing app the subscription and workflow event notification process proceeds per the FHIRcast specification, regardless of the specific app launch used. \n\n\nThe use of the SMART on FHIR OAuth 2.0 profile simplifies, secures and standardizes FHIRcast context synchronization. While more creative approaches, such as the alternate app launch and shared session identifier generation algorithm are possible to use with FHIRcast, care must be taken by the implementer to ensure synchronization and to protect against PHI loss, session hijacking and other security risks. Specifically, the \nhub.topic\n url must be unique, unguessable, and specific to the session. \n\n\nSMART on FHIR\n\n\nFHIRcast extends SMART on FHIR to support clinical context synchronization between disparate, full featured healthcare applications which cannot be embedded within one another. Two launch scenarios are explicitly supported. The app is authorized to synchronize to a user's session using the OAuth2.0 \nfhircast\n scope.\n\n\nDuring the OAuth2.0 handshake, the app \nrequests and is granted\n the \nfhircast\n scope. The EHR's authorization server returns the hub url and any relevant session topics as SMART launch parameters. \n\n\n\n\n\n\n\n\nSMART launch parameter\n\n\nOptionality\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhub.url\n\n\nRequired\n\n\nstring\n\n\nThe base url of the EHR's hub.\n\n\n\n\n\n\nhub.topic\n\n\nOptional\n\n\nstring or array\n\n\nZero, one or more session topic urls. The \nhub.topic\n url is a unique, opaque identifier to the a user's session.\n\n\n\n\n\n\n\n\nThe app requests the \nfhircast\n scope.\n\n\nLocation: https://ehr/authorize?\n            response_type=code\n\n            client_id=app-client-id\n\n            redirect_uri=https%3A%2F%2Fapp%2Fafter-auth\n\n            launch=xyz123\n\n            scope=fhircast+launch+patient%2FObservation.read+patient%2FPatient.read+openid+profile\n\n            state=98wrghuwuogerg97\n\n            aud=https://ehr/fhir\n\n\n\n\nFollowing the OAuth2.0 handshake, the authorization server returns the FHIRcast SMART launch parameters alongside the access_token.\n\n\n{\n  \naccess_token\n: \ni8hweunweunweofiwweoijewiwe\n,\n  \ntoken_type\n: \nbearer\n,\n  \nexpires_in\n: 3600,\n  \nscope\n: \npatient/Observation.read patient/Patient.read\n,\n  \nstate\n: \n98wrghuwuogerg97\n,\n  \nintent\n: \nclient-ui-name\n,\n  \npatient\n:  \n123\n,\n  \nencounter\n: \n456\n,\n  \nhub.url\n : \nhttps://hub.example.com\n,\n  \nhub.topic\n: \nhttps://hub.example.com/7jaa86kgdudewiaq0wtu\n\n}\n\n\n\n\nThe app then \nsubscribes\n to the identified session\n\n\nTwo different launch scenarios are supported. For each launch scenario, the app discovers the session topic to which it \nsubscribes\n.\n\n\nEHR Launch: User SSO's into app from EHR\n\n\nThe simplest launch scenario is the \nSMART on FHIR EHR launch\n, in which the subscribing app is launched from an EHR authenticated session. The app requests both the \nlaunch\n and \nfhircast\n scopes and  receives information about the user and session as part of the launch. The app subsequently subscribes to the launching user's session. \n\n\nIn this scenario, the EHR authorizes the app to synchronize. The EHR provides a session topic as a SMART launch parameter which belongs to the EHR's current user. \n\n\nStandalone launch: User authenticates to EHR to authorize synchronization\n\n\nIf the app can't be launched from the EHR, for example, it's opening on a different machine, it can use the standard \nSMART on FHIR standalone launch\n. \n\n\nIn this scenario, the user authorizes the app to synchronize to her session by authenticating to the EHR's authorization server. The app requests the \nfhircast\n scope and the EHR provides a session topic as a SMART launch parameter which belongs to the EHR's authorizing user. \n\n\nAlternate app launch\n\n\nIn practice, even enterprise apps are often launched from within a clinician's workflow through a variety of bespoke web and desktop technologies. For example, an EHR might launch a desktop app on the same machine by specifying the executable on the Windows shell and passing contextual information as command line switches to the executable. Similarly, bespoke Microsoft COM APIs, shared polling of designated filesystem directories or web service ticketing APIs are also commonly used in production environments.  The use of OAuth 2.0 strengthens and standardizes the security and interoperability of integrations. In the absence of OAuth 2.0 support, these alternate app launch mechanisms can also be used to share a session topic and therefore initiate a shared FHIRcast session. \n\n\nA fictitious example Windows shell integration invokes a PACS system at system startup by passing some credentials, user identity and the FHIRcast session identifier (\nhub.topic\n) and hub base url (\nhub.url\n).\n\n\nC:\\Windows\\System32\\PACS.exe /credentials:\nsecured credentials\n /user:jsmith /hub.url:https://hub.example.com /hub.topic:https://hub.example.com/7jaa86kgdudewiaq0wtu\n\n\n\n\nAn additional example is a simple (and relatively insecure) web application launch extended with the addition of \nhub.url\n and \nhub.topic\n query parameters.\n\n\nGET https://app.example.com/launch.html?user=jsmith\nhub.url=https%3A%2F%2Fhub.example.com\ncast-topic=https%3A%2F%2Fhub.example.com%2F7jaa86kgdudewiaq0wtu\n\n\n\n\nSimilarly, any bespoke app launch mechanism can establish a FHIRcast session by adding the \nhub.url\n and \nhub.topic\n parameters into the existing contextual information shared during the launch.  Once launched, the app subscribes to the session and receives notifications following the standardized FHIRcast interactions. \n\n\nNo app launch\n\n\nIn a scenario in which the user manually starts two or more applications, the applications do not have the capability to establish a shared session topic. Since there's no \"app launch\", with its corresponding ability to exchange contextual information, the unique, unguessable, and session-specific \nhub.topic\n must be calculated by both the driving application's hub and the subscribing application. The synchronizing application could use a shared algorithm and secret to generate the \nhub.topic\n. \n\n\nA bespoke session topic generation algorithm could encrypt the current user's username and a nonce with a shared secret to a pre-configured base url. In this contrived example, a base url and secret are securely configured on the subscribing app. The subscribing app generates and appends a nonce to the current user's Active Directory username, encrypts that string with the shared secret according to an agreed upon encryption algorithm, and finally appends that encrypted string to the base url. The resulting url is unique to the current user and unguessable to a middle man due to the shared secret.\n\n\nhttps://hub.example/com/AES256(username+nonce, shared secret)", 
            "title": "Launch Scenarios"
        }, 
        {
            "location": "/launch-scenarios/#app-launch-scenarios-and-session-discovery", 
            "text": "A FHIRcast Hub uses a unique  hub.topic  url to identify a single session across the Hub, subscribing and driving applications which are engaged in the shared session. The  hub.topic  must be known by a system for it to participate in the session. Typically, the Hub defines the  hub.topic .  The  HL7 SMART on FHIR app launch specification  enables the launched, synchronizing app to discover the  hub.topic , because the SMART OAuth 2.0 server provides it during the OAuth 2.0 handshake as a SMART launch parameter. Use of SMART requires either that a synchronizing app supports the SMART on FHIR specification and specifically either be launched from the driving app or use the Hub's authorization server's login page.   Once the  hub.topic  and url to the hub is known by the synchronizing app the subscription and workflow event notification process proceeds per the FHIRcast specification, regardless of the specific app launch used.   The use of the SMART on FHIR OAuth 2.0 profile simplifies, secures and standardizes FHIRcast context synchronization. While more creative approaches, such as the alternate app launch and shared session identifier generation algorithm are possible to use with FHIRcast, care must be taken by the implementer to ensure synchronization and to protect against PHI loss, session hijacking and other security risks. Specifically, the  hub.topic  url must be unique, unguessable, and specific to the session.", 
            "title": "App launch scenarios and session discovery"
        }, 
        {
            "location": "/launch-scenarios/#smart-on-fhir", 
            "text": "FHIRcast extends SMART on FHIR to support clinical context synchronization between disparate, full featured healthcare applications which cannot be embedded within one another. Two launch scenarios are explicitly supported. The app is authorized to synchronize to a user's session using the OAuth2.0  fhircast  scope.  During the OAuth2.0 handshake, the app  requests and is granted  the  fhircast  scope. The EHR's authorization server returns the hub url and any relevant session topics as SMART launch parameters.      SMART launch parameter  Optionality  Type  Description      hub.url  Required  string  The base url of the EHR's hub.    hub.topic  Optional  string or array  Zero, one or more session topic urls. The  hub.topic  url is a unique, opaque identifier to the a user's session.     The app requests the  fhircast  scope.  Location: https://ehr/authorize?\n            response_type=code \n            client_id=app-client-id \n            redirect_uri=https%3A%2F%2Fapp%2Fafter-auth \n            launch=xyz123 \n            scope=fhircast+launch+patient%2FObservation.read+patient%2FPatient.read+openid+profile \n            state=98wrghuwuogerg97 \n            aud=https://ehr/fhir  Following the OAuth2.0 handshake, the authorization server returns the FHIRcast SMART launch parameters alongside the access_token.  {\n   access_token :  i8hweunweunweofiwweoijewiwe ,\n   token_type :  bearer ,\n   expires_in : 3600,\n   scope :  patient/Observation.read patient/Patient.read ,\n   state :  98wrghuwuogerg97 ,\n   intent :  client-ui-name ,\n   patient :   123 ,\n   encounter :  456 ,\n   hub.url  :  https://hub.example.com ,\n   hub.topic :  https://hub.example.com/7jaa86kgdudewiaq0wtu \n}  The app then  subscribes  to the identified session  Two different launch scenarios are supported. For each launch scenario, the app discovers the session topic to which it  subscribes .", 
            "title": "SMART on FHIR"
        }, 
        {
            "location": "/launch-scenarios/#ehr-launch-user-ssos-into-app-from-ehr", 
            "text": "The simplest launch scenario is the  SMART on FHIR EHR launch , in which the subscribing app is launched from an EHR authenticated session. The app requests both the  launch  and  fhircast  scopes and  receives information about the user and session as part of the launch. The app subsequently subscribes to the launching user's session.   In this scenario, the EHR authorizes the app to synchronize. The EHR provides a session topic as a SMART launch parameter which belongs to the EHR's current user.", 
            "title": "EHR Launch: User SSO's into app from EHR"
        }, 
        {
            "location": "/launch-scenarios/#standalone-launch-user-authenticates-to-ehr-to-authorize-synchronization", 
            "text": "If the app can't be launched from the EHR, for example, it's opening on a different machine, it can use the standard  SMART on FHIR standalone launch .   In this scenario, the user authorizes the app to synchronize to her session by authenticating to the EHR's authorization server. The app requests the  fhircast  scope and the EHR provides a session topic as a SMART launch parameter which belongs to the EHR's authorizing user.", 
            "title": "Standalone launch: User authenticates to EHR to authorize synchronization"
        }, 
        {
            "location": "/launch-scenarios/#alternate-app-launch", 
            "text": "In practice, even enterprise apps are often launched from within a clinician's workflow through a variety of bespoke web and desktop technologies. For example, an EHR might launch a desktop app on the same machine by specifying the executable on the Windows shell and passing contextual information as command line switches to the executable. Similarly, bespoke Microsoft COM APIs, shared polling of designated filesystem directories or web service ticketing APIs are also commonly used in production environments.  The use of OAuth 2.0 strengthens and standardizes the security and interoperability of integrations. In the absence of OAuth 2.0 support, these alternate app launch mechanisms can also be used to share a session topic and therefore initiate a shared FHIRcast session.   A fictitious example Windows shell integration invokes a PACS system at system startup by passing some credentials, user identity and the FHIRcast session identifier ( hub.topic ) and hub base url ( hub.url ).  C:\\Windows\\System32\\PACS.exe /credentials: secured credentials  /user:jsmith /hub.url:https://hub.example.com /hub.topic:https://hub.example.com/7jaa86kgdudewiaq0wtu  An additional example is a simple (and relatively insecure) web application launch extended with the addition of  hub.url  and  hub.topic  query parameters.  GET https://app.example.com/launch.html?user=jsmith hub.url=https%3A%2F%2Fhub.example.com cast-topic=https%3A%2F%2Fhub.example.com%2F7jaa86kgdudewiaq0wtu  Similarly, any bespoke app launch mechanism can establish a FHIRcast session by adding the  hub.url  and  hub.topic  parameters into the existing contextual information shared during the launch.  Once launched, the app subscribes to the session and receives notifications following the standardized FHIRcast interactions.", 
            "title": "Alternate app launch"
        }, 
        {
            "location": "/launch-scenarios/#no-app-launch", 
            "text": "In a scenario in which the user manually starts two or more applications, the applications do not have the capability to establish a shared session topic. Since there's no \"app launch\", with its corresponding ability to exchange contextual information, the unique, unguessable, and session-specific  hub.topic  must be calculated by both the driving application's hub and the subscribing application. The synchronizing application could use a shared algorithm and secret to generate the  hub.topic .   A bespoke session topic generation algorithm could encrypt the current user's username and a nonce with a shared secret to a pre-configured base url. In this contrived example, a base url and secret are securely configured on the subscribing app. The subscribing app generates and appends a nonce to the current user's Active Directory username, encrypts that string with the shared secret according to an agreed upon encryption algorithm, and finally appends that encrypted string to the base url. The resulting url is unique to the current user and unguessable to a middle man due to the shared secret.  https://hub.example/com/AES256(username+nonce, shared secret)", 
            "title": "No app launch"
        }, 
        {
            "location": "/syncconsiderations/", 
            "text": "Synchronization Considerations\n\n\nFHIRcast describes a mechanism for synchronizing distinct applications. \nSometimes things go wrong and applications fail to synchronize or become out of sync. \nFor example, the user within the EHR opens a new patient's record,\nbut the app fails to process the update and continues displaying the initial patient.\n\nDepending upon the expectations of the user and the error handling of the applications in use, \nthis scenario is potentially risky. \nIdentified below are four distinct synchronization scenarios, ranging from lowest level of expected synchronization to highest. \n\n\nOverall, FHIRcast does not dictate how applications should react to synrhonization failure. \nYou should design your product to meet your customer's expectations and needs.\nAppropriate error handling is specific to the synchronization scenario, user expectations and implemeter.\n\n\nAlso note that synchronization failure is a worst-case scenario and should rarely occur in production.\n\n\nScenarios\n\n\nBelow a couple of usage scenarios are listed where the risk of becoming out of sync are exemplified\n\n\nMachine-to-machine-to-machine: Different machines, different times\n\n\nScenario\n: Clinician walks away from her desktop EHR and accesses an app on her mobile device which synchronizes to the EHR's hibernated session. \n\n\n\n\n\n\n\n\nConsideration\n\n\nRisk\n\n\n\n\n\n\n\n\n\n\nSynchronization failure significance\n\n\nlow\n\n\n\n\n\n\nPerformance expectations\n\n\nnegligible\n\n\n\n\n\n\nUser inability to distinguish between synchronized applications\n\n\nn/a\n\n\n\n\n\n\n\n\nSummary\n: This serial or sequential use-case is a convenience synchronization and the clinical risk for synchronization failure is low. \n\n\nCross device: Different machines, same time\n\n\nScenario\n: Clinician accesses her desktop EHR as well an app on her mobile device at the same time. Mobile device synchronizes with the EHR desktop session. \n\n\n\n\n\n\n\n\nConsideration\n\n\nRisk\n\n\n\n\n\n\n\n\n\n\nSynchronization failure significance\n\n\nmedium\n\n\n\n\n\n\nPerformance expectations\n\n\nlow\n\n\n\n\n\n\nUser inability to distinguish between synchronized applications\n\n\nlow\n\n\n\n\n\n\n\n\nSummary\n: The user clearly distinguishes between the applications synchronized on multiple devices and therefore clinical risk for a synchronization failure depends upon the workflow and implementer's goals. User manual action may be appropriate when synchronization fails.\n\n\nSame machine, same time\n\n\nScenario\n: Clinician is accessing two or more applications on the same machine in a single workflow.  \n\n\n\n\n\n\n\n\nConsideration\n\n\nRisk\n\n\n\n\n\n\n\n\n\n\nSynchronization failure significance\n\n\nmedium\n\n\n\n\n\n\nPerformance expectations\n\n\nhigh\n\n\n\n\n\n\nUser inability to distinguish between synchronized applications\n\n\nmedium\n\n\n\n\n\n\n\n\nSummary\n: Although, disparate applications are distinguishable from one another, the workflow requires rapidly accessing one then another application. Application responsivity to synchronization is particularly important. Synchronization failure may introduce clinical risk and therefore user notification of synchronization failure is suggested.\n\n\nEmbedded apps: Same machine, same time, same UI\n\n\nScenario\n: Clinician accesses multiple applications within a single user interface. \n\n\n\n\n\n\n\n\nConsideration\n\n\nRisk\n\n\n\n\n\n\n\n\n\n\nSynchronization failure significance\n\n\nvery high\n\n\n\n\n\n\nPerformance expectations\n\n\nhigh\n\n\n\n\n\n\nUser inability to distinguish between synchronized applications\n\n\nvery high\n\n\n\n\n\n\n\n\nSummary\n: Disparate applications indistinguishable from one another require the greatest amount of context synchronization. Clinical risk of synchronization failure is critical. Application responsivity to synchronization should be high. Synchronization failure may introduce clinical risk and therefore user notification of synchronization failure is suggested.\n\n\nSynchronization recommendations\n\n\nFHIRcast is based on a subscription model where each subscribing client receives notifications of the updated state of the topic being subscribed to. There is no explicit requirement for a subscribing client to follow the context of another client. \nThe subscription model also implies that it is the subscribing clients responsibility to maintain a contextual synchronization or to notify end users whenever the contextual synchronization is lost.\nHowever, as noted in above scenarios, there may be risk associated with the end user expectation of have two tightly synchronized applications if they fall out of sync. \nThere are in some cases good reasons for a client not to follow the subscribed context and this section will outline some of the recommended approaches\n\n\nBlocking action on subscribing client preventing context synchronization\n\n\nMany systems in some cases go into edit mode or start a modal dialog that locks the system from changing context without user intervention. Examples can be when modifying texts, reports, annotating images or performing administrative tasks. The clients may by design then decline to follow the subscribed context to prevent loss of end user data.\n\n\n\n\n\n\n\n\nSystem\n\n\nFailure mode\n\n\nPossible actions\n\n\n\n\n\n\n\n\n\n\nSubscribing Client\n\n\nModal dialog open in UI, unable to change case without losing end user data\n\n\nPresent end user with clear indication that contextual synchronization is lost\n\n\n\n\n\n\nSubscribing Client\n\n\nUnable to change context\n\n\nRespond with a http status code of 409 conflict\n\n\n\n\n\n\nHub\n\n\nOne of the subscribing clients cannot follow context\n\n\nNo action/Update all subscribing clients with event sync-error\n\n\n\n\n\n\n\n\nUnresponsive callback url of subscribing client\n\n\nThis error scenario is all about the hub losing contact with its subscribing clients. This may be due to a client crash, mis-configured callback url or simply an underlying network failure. In these cases the clients are usually not aware of the fact that the context has changed or that the subscription messages are not received.\n\n\n\n\n\n\n\n\nSystem\n\n\nFailure mode\n\n\nPossible actions\n\n\n\n\n\n\n\n\n\n\nSubscribing Client\n\n\nNo event received from hub\n\n\nNo action possible\n\n\n\n\n\n\nHub\n\n\nTimeout or error from client callback url\n\n\nNo action/Retry/Update all subscribing clients with event sync-error\n\n\n\n\n\n\n\n\nSync-error event received from hub\n\n\nIn the scenarios where the hub is aware of a synchronization error, it is advisable for the hub to signal this to the subscribing applications to minimize any patient risk associated with having one or many applications out of sync.\n\n\n\n\n\n\n\n\nSystem\n\n\nFailure mode\n\n\nPossible actions\n\n\n\n\n\n\n\n\n\n\nSubscribing Client\n\n\nSync-error event received from hub\n\n\nPresent end user with clear indication that contextual synchronization is lost", 
            "title": "Synchronization Considerations"
        }, 
        {
            "location": "/syncconsiderations/#synchronization-considerations", 
            "text": "FHIRcast describes a mechanism for synchronizing distinct applications. \nSometimes things go wrong and applications fail to synchronize or become out of sync. \nFor example, the user within the EHR opens a new patient's record,\nbut the app fails to process the update and continues displaying the initial patient. \nDepending upon the expectations of the user and the error handling of the applications in use, \nthis scenario is potentially risky. \nIdentified below are four distinct synchronization scenarios, ranging from lowest level of expected synchronization to highest.   Overall, FHIRcast does not dictate how applications should react to synrhonization failure. \nYou should design your product to meet your customer's expectations and needs.\nAppropriate error handling is specific to the synchronization scenario, user expectations and implemeter.  Also note that synchronization failure is a worst-case scenario and should rarely occur in production.", 
            "title": "Synchronization Considerations"
        }, 
        {
            "location": "/syncconsiderations/#scenarios", 
            "text": "Below a couple of usage scenarios are listed where the risk of becoming out of sync are exemplified", 
            "title": "Scenarios"
        }, 
        {
            "location": "/syncconsiderations/#machine-to-machine-to-machine-different-machines-different-times", 
            "text": "Scenario : Clinician walks away from her desktop EHR and accesses an app on her mobile device which synchronizes to the EHR's hibernated session.      Consideration  Risk      Synchronization failure significance  low    Performance expectations  negligible    User inability to distinguish between synchronized applications  n/a     Summary : This serial or sequential use-case is a convenience synchronization and the clinical risk for synchronization failure is low.", 
            "title": "Machine-to-machine-to-machine: Different machines, different times"
        }, 
        {
            "location": "/syncconsiderations/#cross-device-different-machines-same-time", 
            "text": "Scenario : Clinician accesses her desktop EHR as well an app on her mobile device at the same time. Mobile device synchronizes with the EHR desktop session.      Consideration  Risk      Synchronization failure significance  medium    Performance expectations  low    User inability to distinguish between synchronized applications  low     Summary : The user clearly distinguishes between the applications synchronized on multiple devices and therefore clinical risk for a synchronization failure depends upon the workflow and implementer's goals. User manual action may be appropriate when synchronization fails.", 
            "title": "Cross device: Different machines, same time"
        }, 
        {
            "location": "/syncconsiderations/#same-machine-same-time", 
            "text": "Scenario : Clinician is accessing two or more applications on the same machine in a single workflow.       Consideration  Risk      Synchronization failure significance  medium    Performance expectations  high    User inability to distinguish between synchronized applications  medium     Summary : Although, disparate applications are distinguishable from one another, the workflow requires rapidly accessing one then another application. Application responsivity to synchronization is particularly important. Synchronization failure may introduce clinical risk and therefore user notification of synchronization failure is suggested.", 
            "title": "Same machine, same time"
        }, 
        {
            "location": "/syncconsiderations/#embedded-apps-same-machine-same-time-same-ui", 
            "text": "Scenario : Clinician accesses multiple applications within a single user interface.      Consideration  Risk      Synchronization failure significance  very high    Performance expectations  high    User inability to distinguish between synchronized applications  very high     Summary : Disparate applications indistinguishable from one another require the greatest amount of context synchronization. Clinical risk of synchronization failure is critical. Application responsivity to synchronization should be high. Synchronization failure may introduce clinical risk and therefore user notification of synchronization failure is suggested.", 
            "title": "Embedded apps: Same machine, same time, same UI"
        }, 
        {
            "location": "/syncconsiderations/#synchronization-recommendations", 
            "text": "FHIRcast is based on a subscription model where each subscribing client receives notifications of the updated state of the topic being subscribed to. There is no explicit requirement for a subscribing client to follow the context of another client. \nThe subscription model also implies that it is the subscribing clients responsibility to maintain a contextual synchronization or to notify end users whenever the contextual synchronization is lost.\nHowever, as noted in above scenarios, there may be risk associated with the end user expectation of have two tightly synchronized applications if they fall out of sync. \nThere are in some cases good reasons for a client not to follow the subscribed context and this section will outline some of the recommended approaches", 
            "title": "Synchronization recommendations"
        }, 
        {
            "location": "/syncconsiderations/#blocking-action-on-subscribing-client-preventing-context-synchronization", 
            "text": "Many systems in some cases go into edit mode or start a modal dialog that locks the system from changing context without user intervention. Examples can be when modifying texts, reports, annotating images or performing administrative tasks. The clients may by design then decline to follow the subscribed context to prevent loss of end user data.     System  Failure mode  Possible actions      Subscribing Client  Modal dialog open in UI, unable to change case without losing end user data  Present end user with clear indication that contextual synchronization is lost    Subscribing Client  Unable to change context  Respond with a http status code of 409 conflict    Hub  One of the subscribing clients cannot follow context  No action/Update all subscribing clients with event sync-error", 
            "title": "Blocking action on subscribing client preventing context synchronization"
        }, 
        {
            "location": "/syncconsiderations/#unresponsive-callback-url-of-subscribing-client", 
            "text": "This error scenario is all about the hub losing contact with its subscribing clients. This may be due to a client crash, mis-configured callback url or simply an underlying network failure. In these cases the clients are usually not aware of the fact that the context has changed or that the subscription messages are not received.     System  Failure mode  Possible actions      Subscribing Client  No event received from hub  No action possible    Hub  Timeout or error from client callback url  No action/Retry/Update all subscribing clients with event sync-error", 
            "title": "Unresponsive callback url of subscribing client"
        }, 
        {
            "location": "/syncconsiderations/#sync-error-event-received-from-hub", 
            "text": "In the scenarios where the hub is aware of a synchronization error, it is advisable for the hub to signal this to the subscribing applications to minimize any patient risk associated with having one or many applications out of sync.     System  Failure mode  Possible actions      Subscribing Client  Sync-error event received from hub  Present end user with clear indication that contextual synchronization is lost", 
            "title": "Sync-error event received from hub"
        }, 
        {
            "location": "/security-considerations/", 
            "text": "Security Considerations\n\n\nFHIRcast enables the synchronization of healthcare applications user interfaces in real-time through the exchange of a workflow event to a small number of disparate applications. The notification message which describes the workflow event is a simple json wrapper around one or more FHIR resources. These FHIR resources can contain Protected Health Information (PHI). \n\n\nActors\n\n\n\n\nSubscribing app\n\n\nHub\n\n\nAuthorization Server\n\n\nResource server\n\n\n\n\nFHIRcast ties SMART as the authnz layer together with WebSub for subscription and event notification.\n\n\nSources of Risk\n\n\n\n\nThe FHIRcast Hub pushes PHI to a dynamic url specified by the authenticated app. \n\n\nAn app's credentials or a Hub's lack of authentication could be used by a malicious system to control the user's session.\n\n\nFHIRcast recommends the use of SMART on FHIR, but does not require it. Implementation-specific launch, authentication, and authorization protocols may be possible. These alternate protocols should be scrutinized by implementers for additional security risks.\n\n\n\n\nSMART on FHIR\n\n\nSMART on FHIR\n profiles \nOAuth 2.0's authorization code grant type\n and extends it by introducing an \"\nEHR Launch Sequence\n\". The Argonaut Project performed a formal security review of SMART on FHIR, resulting in a \nRisk Assessment report\n.\n\n\nFHIRcast builds on SMART by introducing a new, standard OAuth 2.0 scope of \nfhircast\n, as well as two new SMART launch parameters of \nhub.url\n and \nhub.topic\n. \n\n\n\n\nHL7 SMART on FHIR specification\n\n\nArgonaut Risk Assessment report\n.\n\n\nOAuth 2.0 Threat Model and Security Considerations\n\n\n\n\nHTTP Web Hooks using WebSub\n\n\nWebSub\n is a W3C RFC designed for the distribution of web content through a standardized web hooks architecture. FHIRcast uses WebSub to allow clients to subscribe and unsubscribe to the Hub and, for the Hub to notify subscribers of events. \n\n\nUnlike WebSub, FHIRcast requires that both the Hub and the subscribing apps endpoints are exposed over https.\n\n\nThe below \nflow diagram\n illustrates each of the interactions. \n\n\n\n\nHow does the subscriber authenticate to the Hub?\n\n\nThe subscribing app can make three distinct API calls to the Hub. For each of these calls, the subscribing app authenticates to the Hub with the Hub's authorization server issued SMART \naccess_token\n. Per SMART on FHIR, this \naccess_token\n is presented to the Hub in the HTTP Authorization header.\n\n\n\n\nApp subscribes to Hub\n\n\nApp requests change to shared context\n\n\nApp unsubscribes from session\n\n\n\n\nPOST https://hub.example.com\nHost: hub.example.com\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe\n\n\n\n\nHow does the Hub validate the subscriber?\n\n\nThe Hub can make three distinct API calls to the subscribing app's \nhub.callback\n url. \n\n\n\n\nHub verifies callback url with app\n\n\nHub notifies app of event\n\n\nHub denies subscription\n\n\n\n\nThis \nflow diagram\n describes the actors and actions. \n\n\n\n\nThe \nsubscribing app initiates\n the FHIRcast subscription, authenticating to the Hub with its bearer token, and providing the \nhub.secret\n and \nhub.callback\n url. The Hub verifies intent and ownership by performing an HTTP GET to the \nhub.callback\n url, with a \nhub.challenge\n. The subscribing app must echo the \nhub.challenge\n in the body of an HTTP 202 response. Once a workflow event occurs, the Hub notifies the app of the event by POSTing to the subscribing app's \nhub.callback\n url. The Hub provides an \nHMAC signature\n of the previously provided \nhub.secret\n in the \nX-Hub-Signature\n HTTP header.\n\n\nPOST https://app.example.com/session/callback/v7tfwuk17a HTTP/1.1\nHost: subscriber\nX-Hub-Signature: sha256=dce85dc8dfde2426079063ad413268ac72dcf845f9f923193285e693be6ff3ae\n\n\n\n\nThe client that creates the subscription may not be the same system as the server hosting the callback url. (For example, some type of federated authorization model could possibly exist between these two systems.) However, in FHIRcast, the Hub assumes that the same authorization and access rights apply to both the subscribing client and the callback url.\n\n\nWebSub Security Considerations\n\n\nThe WebSub RFC defines \nspecific security considerations\n, including the below, which are listed here for emphasis or elevation from optional to mandatory.\n\n Subscribers must communicate with a Hub over https.\n\n Hub must reject unsecured http callback urls. \n\n The subscribing app's \nhub.callback\n url should be unique and unguessable. \n\n Subscribing apps must provide a \nhub.secret\n and validate the \nX-Hub-Signature\n in the notification message.\n\n Hubs must reject subscriptions if the callback url does not echo the \nhub.challenge\n as part of the intent verification GET.\n\n When computing the HMAC digest with the \nhub.secret\n for the \nX-Hub-Signature\n HTTP header, Hubs must use SHA-256 or greater and must not use SHA-1.\n* For each subscription, the \nhub.secret\n must be unique, unguessable and securely stored by both the Hub and the app. \n\n\n\n\nW3C WebSub RFC\n\n\nW3C WebSub RFC's Security Considerations\n\n\nHMAC RFC 6151\n\n\n\n\nExperimental Websockets support\n\n\nIn addition to the web hooks communication pattern, the FHIRcast community is experimenting with the use of websockets for event notification. Below are some incomplete considerations for a potential websockets implementation.\n\n\nSubscribers SHOULD only use and Hub's SHOULD only accept connections made over the secure \nwss://\n websocket protocol and not the unsecured \nws://\n websocket protocol.\n\n\nThe WebSockets standard defines an \nOrigin\n header, sent from the client to the server and intended to contain the url of the client. Subscribers using websockets may be running in a browser, in which case the browser enforces origin reporting to the Hub, or native apps in which the origin reported to the Hub can not be trusted. Therefore, a Hub exposing a websocket connection MUST not rely upon the origin sent by the subscriber. \n\n\nWhile native app subscribers can send any standard HTTP headers, notably including \nAuthorization: Bearer\n, browser-based subscribers are limited to only HTTP Basic Auth or cookies. Therefore, the typical use of the OAuth2.0 access_token for bearer authentication does not consistently work with websockets. FHIRcast describes a \"ticket\"-based authentication system, in which the \nhub.topic\n url provided to the subscriber as part of the secured SMART app launch serves not only as a unique session identifier, but also as an \"authorization ticket\". This authorization ticket effectively acts as a bearer token. The Hub should therefore take care to generate opaque and unique \nhub.topic\n values. \n\n\n\n\nThe WebSocket Protocol RFC 6455\n\n\nHeroku's excellent explanation of websocket security", 
            "title": "Security Considerations"
        }, 
        {
            "location": "/security-considerations/#security-considerations", 
            "text": "FHIRcast enables the synchronization of healthcare applications user interfaces in real-time through the exchange of a workflow event to a small number of disparate applications. The notification message which describes the workflow event is a simple json wrapper around one or more FHIR resources. These FHIR resources can contain Protected Health Information (PHI).", 
            "title": "Security Considerations"
        }, 
        {
            "location": "/security-considerations/#actors", 
            "text": "Subscribing app  Hub  Authorization Server  Resource server   FHIRcast ties SMART as the authnz layer together with WebSub for subscription and event notification.", 
            "title": "Actors"
        }, 
        {
            "location": "/security-considerations/#sources-of-risk", 
            "text": "The FHIRcast Hub pushes PHI to a dynamic url specified by the authenticated app.   An app's credentials or a Hub's lack of authentication could be used by a malicious system to control the user's session.  FHIRcast recommends the use of SMART on FHIR, but does not require it. Implementation-specific launch, authentication, and authorization protocols may be possible. These alternate protocols should be scrutinized by implementers for additional security risks.", 
            "title": "Sources of Risk"
        }, 
        {
            "location": "/security-considerations/#smart-on-fhir", 
            "text": "SMART on FHIR  profiles  OAuth 2.0's authorization code grant type  and extends it by introducing an \" EHR Launch Sequence \". The Argonaut Project performed a formal security review of SMART on FHIR, resulting in a  Risk Assessment report .  FHIRcast builds on SMART by introducing a new, standard OAuth 2.0 scope of  fhircast , as well as two new SMART launch parameters of  hub.url  and  hub.topic .    HL7 SMART on FHIR specification  Argonaut Risk Assessment report .  OAuth 2.0 Threat Model and Security Considerations", 
            "title": "SMART on FHIR"
        }, 
        {
            "location": "/security-considerations/#http-web-hooks-using-websub", 
            "text": "WebSub  is a W3C RFC designed for the distribution of web content through a standardized web hooks architecture. FHIRcast uses WebSub to allow clients to subscribe and unsubscribe to the Hub and, for the Hub to notify subscribers of events.   Unlike WebSub, FHIRcast requires that both the Hub and the subscribing apps endpoints are exposed over https.  The below  flow diagram  illustrates each of the interactions.", 
            "title": "HTTP Web Hooks using WebSub"
        }, 
        {
            "location": "/security-considerations/#how-does-the-subscriber-authenticate-to-the-hub", 
            "text": "The subscribing app can make three distinct API calls to the Hub. For each of these calls, the subscribing app authenticates to the Hub with the Hub's authorization server issued SMART  access_token . Per SMART on FHIR, this  access_token  is presented to the Hub in the HTTP Authorization header.   App subscribes to Hub  App requests change to shared context  App unsubscribes from session   POST https://hub.example.com\nHost: hub.example.com\nAuthorization: Bearer i8hweunweunweofiwweoijewiwe", 
            "title": "How does the subscriber authenticate to the Hub?"
        }, 
        {
            "location": "/security-considerations/#how-does-the-hub-validate-the-subscriber", 
            "text": "The Hub can make three distinct API calls to the subscribing app's  hub.callback  url.    Hub verifies callback url with app  Hub notifies app of event  Hub denies subscription   This  flow diagram  describes the actors and actions.    The  subscribing app initiates  the FHIRcast subscription, authenticating to the Hub with its bearer token, and providing the  hub.secret  and  hub.callback  url. The Hub verifies intent and ownership by performing an HTTP GET to the  hub.callback  url, with a  hub.challenge . The subscribing app must echo the  hub.challenge  in the body of an HTTP 202 response. Once a workflow event occurs, the Hub notifies the app of the event by POSTing to the subscribing app's  hub.callback  url. The Hub provides an  HMAC signature  of the previously provided  hub.secret  in the  X-Hub-Signature  HTTP header.  POST https://app.example.com/session/callback/v7tfwuk17a HTTP/1.1\nHost: subscriber\nX-Hub-Signature: sha256=dce85dc8dfde2426079063ad413268ac72dcf845f9f923193285e693be6ff3ae  The client that creates the subscription may not be the same system as the server hosting the callback url. (For example, some type of federated authorization model could possibly exist between these two systems.) However, in FHIRcast, the Hub assumes that the same authorization and access rights apply to both the subscribing client and the callback url.", 
            "title": "How does the Hub validate the subscriber?"
        }, 
        {
            "location": "/security-considerations/#websub-security-considerations", 
            "text": "The WebSub RFC defines  specific security considerations , including the below, which are listed here for emphasis or elevation from optional to mandatory.  Subscribers must communicate with a Hub over https.  Hub must reject unsecured http callback urls.   The subscribing app's  hub.callback  url should be unique and unguessable.   Subscribing apps must provide a  hub.secret  and validate the  X-Hub-Signature  in the notification message.  Hubs must reject subscriptions if the callback url does not echo the  hub.challenge  as part of the intent verification GET.  When computing the HMAC digest with the  hub.secret  for the  X-Hub-Signature  HTTP header, Hubs must use SHA-256 or greater and must not use SHA-1.\n* For each subscription, the  hub.secret  must be unique, unguessable and securely stored by both the Hub and the app.    W3C WebSub RFC  W3C WebSub RFC's Security Considerations  HMAC RFC 6151", 
            "title": "WebSub Security Considerations"
        }, 
        {
            "location": "/security-considerations/#experimental-websockets-support", 
            "text": "In addition to the web hooks communication pattern, the FHIRcast community is experimenting with the use of websockets for event notification. Below are some incomplete considerations for a potential websockets implementation.  Subscribers SHOULD only use and Hub's SHOULD only accept connections made over the secure  wss://  websocket protocol and not the unsecured  ws://  websocket protocol.  The WebSockets standard defines an  Origin  header, sent from the client to the server and intended to contain the url of the client. Subscribers using websockets may be running in a browser, in which case the browser enforces origin reporting to the Hub, or native apps in which the origin reported to the Hub can not be trusted. Therefore, a Hub exposing a websocket connection MUST not rely upon the origin sent by the subscriber.   While native app subscribers can send any standard HTTP headers, notably including  Authorization: Bearer , browser-based subscribers are limited to only HTTP Basic Auth or cookies. Therefore, the typical use of the OAuth2.0 access_token for bearer authentication does not consistently work with websockets. FHIRcast describes a \"ticket\"-based authentication system, in which the  hub.topic  url provided to the subscriber as part of the secured SMART app launch serves not only as a unique session identifier, but also as an \"authorization ticket\". This authorization ticket effectively acts as a bearer token. The Hub should therefore take care to generate opaque and unique  hub.topic  values.    The WebSocket Protocol RFC 6455  Heroku's excellent explanation of websocket security", 
            "title": "Experimental Websockets support"
        }, 
        {
            "location": "/about/", 
            "text": "About FHIRcast\n\n\nFHIRcast is an HL7 specification designed to provide a lightweight, inexpensive and http-based application context synchronization standard.  \n\n\nGet involved\n\n\nThere are several ways in which you can get involved with the FHIRcast community.\n\n\n\n\nLog issues, contribute via github\n\n\nConverse at chat.fhir.org\n\n\nAttend an HL7 FHIR Connectathon\n\n\n\n\nWant to help build our test infrastructure?\n\n\n\n\nhelp-wanted issues\n\n\nMilestones", 
            "title": "About"
        }, 
        {
            "location": "/about/#about-fhircast", 
            "text": "FHIRcast is an HL7 specification designed to provide a lightweight, inexpensive and http-based application context synchronization standard.", 
            "title": "About FHIRcast"
        }, 
        {
            "location": "/about/#get-involved", 
            "text": "There are several ways in which you can get involved with the FHIRcast community.   Log issues, contribute via github  Converse at chat.fhir.org  Attend an HL7 FHIR Connectathon", 
            "title": "Get involved"
        }, 
        {
            "location": "/about/#want-to-help-build-our-test-infrastructure", 
            "text": "help-wanted issues  Milestones", 
            "title": "Want to help build our test infrastructure?"
        }
    ]
}